[{"D:\\learn-gitlab\\client\\src\\index.js":"1","D:\\learn-gitlab\\client\\src\\reportWebVitals.js":"2","D:\\learn-gitlab\\client\\src\\App.js":"3","D:\\learn-gitlab\\client\\src\\store.js":"4","D:\\learn-gitlab\\client\\src\\socketService.js":"5","D:\\learn-gitlab\\client\\src\\history.js":"6","D:\\learn-gitlab\\client\\src\\routing\\PrivateRoute.js":"7","D:\\learn-gitlab\\client\\src\\utils\\setAuthToken.js":"8","D:\\learn-gitlab\\client\\src\\actions\\authActions.js":"9","D:\\learn-gitlab\\client\\src\\utils\\Loader.js":"10","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\healthAndSafety.js":"11","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\HomePage.js":"12","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page1.js":"13","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page2.js":"14","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\manage-view.js":"15","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page3.js":"16","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\StaffView.js":"17","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page6.js":"18","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart1.js":"19","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart2.js":"20","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart3.js":"21","D:\\learn-gitlab\\client\\src\\components\\Auth\\Auth.js":"22","D:\\learn-gitlab\\client\\src\\pages\\reports\\Reports.js":"23","D:\\learn-gitlab\\client\\src\\pages\\chat\\Chat.js":"24","D:\\learn-gitlab\\client\\src\\pages\\Stock\\Stock.js":"25","D:\\learn-gitlab\\client\\src\\pages\\login\\Form.js":"26","D:\\learn-gitlab\\client\\src\\pages\\Emp_view\\Emp.js":"27","D:\\learn-gitlab\\client\\src\\pages\\create-team\\CreateTeam.js":"28","D:\\learn-gitlab\\client\\src\\pages\\orders\\GenerateOrderForm.js":"29","D:\\learn-gitlab\\client\\src\\pages\\Target\\Target.js":"30","D:\\learn-gitlab\\client\\src\\pages\\Help\\Help.js":"31","D:\\learn-gitlab\\client\\src\\pages\\Staff_view\\Staff.js":"32","D:\\learn-gitlab\\client\\src\\pages\\confirmation\\Confirm.js":"33","D:\\learn-gitlab\\client\\src\\pages\\Map\\Map.js":"34","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\Manager.js":"35","D:\\learn-gitlab\\client\\src\\pages\\add-material\\AddMaterial.js":"36","D:\\learn-gitlab\\client\\src\\pages\\add-product\\AddProduct.js":"37","D:\\learn-gitlab\\client\\src\\pages\\add-form\\AddForm.js":"38","D:\\learn-gitlab\\client\\src\\pages\\add-machine\\AddMachine.js":"39","D:\\learn-gitlab\\client\\src\\baseUrl.js":"40","D:\\learn-gitlab\\client\\src\\actions\\types.js":"41","D:\\learn-gitlab\\client\\src\\actions\\projectActions.js":"42","D:\\learn-gitlab\\client\\src\\actions\\staffAction.js":"43","D:\\learn-gitlab\\client\\src\\actions\\teamsActions.js":"44","D:\\learn-gitlab\\client\\src\\actions\\userActions.js":"45","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\layouts\\ChartLayout.js":"46","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\layouts\\AgGridLayout.js":"47","D:\\learn-gitlab\\client\\src\\pages\\Staff_view\\Big.js":"48","D:\\learn-gitlab\\client\\src\\pages\\Header\\Header.js":"49","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AssgnModal\\AssignModal.js":"50","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AddteamModel\\AddTeamModel.js":"51","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AddProject\\AddProjectModal.js":"52","D:\\learn-gitlab\\client\\src\\reducers\\index.js":"53","D:\\learn-gitlab\\client\\src\\pages\\Header\\SliderData.js":"54","D:\\learn-gitlab\\client\\src\\utils\\functions.js":"55","D:\\learn-gitlab\\client\\src\\reducers\\appReducer.js":"56","D:\\learn-gitlab\\client\\src\\api\\index.js":"57","D:\\learn-gitlab\\client\\src\\api\\delete.js":"58","D:\\learn-gitlab\\client\\src\\api\\baseUrl.js":"59","D:\\learn-gitlab\\client\\src\\api\\post.js":"60","D:\\learn-gitlab\\client\\src\\api\\get.js":"61","D:\\learn-gitlab\\client\\src\\api\\put.js":"62","D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Buttom-Container.js":"63","D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Top-Container.js":"64","D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Form.js":"65"},{"size":657,"mtime":1626896992694,"results":"66","hashOfConfig":"67"},{"size":375,"mtime":1626043410860,"results":"68","hashOfConfig":"67"},{"size":7026,"mtime":1626808709968,"results":"69","hashOfConfig":"67"},{"size":399,"mtime":1626043410861,"results":"70","hashOfConfig":"67"},{"size":90,"mtime":1626043410861,"results":"71","hashOfConfig":"67"},{"size":94,"mtime":1626043410825,"results":"72","hashOfConfig":"67"},{"size":608,"mtime":1626043410860,"results":"73","hashOfConfig":"67"},{"size":263,"mtime":1626043410863,"results":"74","hashOfConfig":"67"},{"size":2212,"mtime":1626902799297,"results":"75","hashOfConfig":"67"},{"size":430,"mtime":1626043410862,"results":"76","hashOfConfig":"67"},{"size":44234,"mtime":1626808897907,"results":"77","hashOfConfig":"67"},{"size":269,"mtime":1626043410820,"results":"78","hashOfConfig":"67"},{"size":7318,"mtime":1626045516893,"results":"79","hashOfConfig":"67"},{"size":4664,"mtime":1626043410820,"results":"80","hashOfConfig":"67"},{"size":2486,"mtime":1626043410824,"results":"81","hashOfConfig":"67"},{"size":749,"mtime":1626043410821,"results":"82","hashOfConfig":"67"},{"size":2466,"mtime":1626043410822,"results":"83","hashOfConfig":"67"},{"size":1494,"mtime":1626043410822,"results":"84","hashOfConfig":"67"},{"size":1595,"mtime":1626043410819,"results":"85","hashOfConfig":"67"},{"size":1597,"mtime":1626043410819,"results":"86","hashOfConfig":"67"},{"size":1380,"mtime":1626905762461,"results":"87","hashOfConfig":"67"},{"size":9086,"mtime":1626043410818,"results":"88","hashOfConfig":"67"},{"size":4471,"mtime":1626043410853,"results":"89","hashOfConfig":"67"},{"size":14466,"mtime":1626043410841,"results":"90","hashOfConfig":"67"},{"size":10393,"mtime":1626043410837,"results":"91","hashOfConfig":"67"},{"size":4280,"mtime":1626043410852,"results":"92","hashOfConfig":"67"},{"size":17939,"mtime":1626905698996,"results":"93","hashOfConfig":"67"},{"size":1635,"mtime":1626043410849,"results":"94","hashOfConfig":"67"},{"size":5261,"mtime":1626893009007,"results":"95","hashOfConfig":"67"},{"size":7810,"mtime":1626043410838,"results":"96","hashOfConfig":"67"},{"size":5936,"mtime":1626043410829,"results":"97","hashOfConfig":"67"},{"size":10853,"mtime":1626893018704,"results":"98","hashOfConfig":"67"},{"size":4899,"mtime":1626043410848,"results":"99","hashOfConfig":"67"},{"size":1581,"mtime":1626043410833,"results":"100","hashOfConfig":"67"},{"size":10964,"mtime":1626141590439,"results":"101","hashOfConfig":"67"},{"size":2764,"mtime":1626043410839,"results":"102","hashOfConfig":"67"},{"size":6672,"mtime":1626043410840,"results":"103","hashOfConfig":"67"},{"size":2163,"mtime":1626043410838,"results":"104","hashOfConfig":"67"},{"size":2681,"mtime":1626043410839,"results":"105","hashOfConfig":"67"},{"size":117,"mtime":1626043410816,"results":"106","hashOfConfig":"67"},{"size":922,"mtime":1626905358530,"results":"107","hashOfConfig":"67"},{"size":1561,"mtime":1626043410807,"results":"108","hashOfConfig":"67"},{"size":2552,"mtime":1626905368668,"results":"109","hashOfConfig":"67"},{"size":1495,"mtime":1626043410807,"results":"110","hashOfConfig":"67"},{"size":725,"mtime":1626043410808,"results":"111","hashOfConfig":"67"},{"size":1595,"mtime":1626043410824,"results":"112","hashOfConfig":"67"},{"size":1626,"mtime":1626043410823,"results":"113","hashOfConfig":"67"},{"size":700,"mtime":1626043410833,"results":"114","hashOfConfig":"67"},{"size":5666,"mtime":1626808709970,"results":"115","hashOfConfig":"67"},{"size":2709,"mtime":1626043410832,"results":"116","hashOfConfig":"67"},{"size":2701,"mtime":1626141585621,"results":"117","hashOfConfig":"67"},{"size":3063,"mtime":1626043410831,"results":"118","hashOfConfig":"67"},{"size":143,"mtime":1626043410859,"results":"119","hashOfConfig":"67"},{"size":634,"mtime":1626043410829,"results":"120","hashOfConfig":"67"},{"size":208,"mtime":1626043410862,"results":"121","hashOfConfig":"67"},{"size":2564,"mtime":1626905433748,"results":"122","hashOfConfig":"67"},{"size":129,"mtime":1626043410809,"results":"123","hashOfConfig":"67"},{"size":606,"mtime":1626043410809,"results":"124","hashOfConfig":"67"},{"size":110,"mtime":1626043410808,"results":"125","hashOfConfig":"67"},{"size":647,"mtime":1626043410809,"results":"126","hashOfConfig":"67"},{"size":597,"mtime":1626043410809,"results":"127","hashOfConfig":"67"},{"size":611,"mtime":1626043410809,"results":"128","hashOfConfig":"67"},{"size":1638,"mtime":1626043410849,"results":"129","hashOfConfig":"67"},{"size":1635,"mtime":1626043410850,"results":"130","hashOfConfig":"67"},{"size":4053,"mtime":1626808709971,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aff04g",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"136"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"136"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"136"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"136"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"136"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"136"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"136"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"136"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"136"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"136"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"136"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"136"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"136"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"136"},"D:\\learn-gitlab\\client\\src\\index.js",[],"D:\\learn-gitlab\\client\\src\\reportWebVitals.js",[],["285","286"],"D:\\learn-gitlab\\client\\src\\App.js",["287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import React, { Suspense, useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { socket } from './socketService';\r\nimport PrivateRoute from './routing/PrivateRoute';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Provider } from 'react-redux';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport store from './store';\r\nimport { LoadUser } from './actions/authActions';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport setAuthToken from './utils/setAuthToken';\r\n//Loading\r\nimport Loader from 'react-loader-spinner';\r\nimport history from './history';\r\n\r\n//HomePage\r\n\r\nconst Home = React.lazy(() => import('./components/Dashboard/HomePage'));\r\n\r\n//pages\r\nconst HealthSafety = React.lazy(() =>\r\n  import('./components/Dashboard/healthAndSafety')\r\n);\r\nconst Admin = React.lazy(() => import('./components/Dashboard/Page1'));\r\nconst Page2 = React.lazy(() => import('./components/Dashboard/Page2'));\r\nconst Page3 = React.lazy(() => import('./components/Dashboard/Page3'));\r\nconst Page4 = React.lazy(() => import('./components/Dashboard/manage-view'));\r\nconst Page5 = React.lazy(() => import('./components/Dashboard/StaffView'));\r\nconst Page6 = React.lazy(() => import('./components/Dashboard/Page6'));\r\nconst ChartEx1 = React.lazy(() => import('./components/Dashboard/Chart1'));\r\nconst ChartEx2 = React.lazy(() => import('./components/Dashboard/Chart2'));\r\nconst ChartEx3 = React.lazy(() => import('./components/Dashboard/Chart3'));\r\n//Authentication\r\n\r\nconst Auth = React.lazy(() => import('./components/Auth/Auth'));\r\nconst Loading = React.lazy(() => import('./utils/Loader'));\r\n\r\n//user views\r\nconst Reports = React.lazy(() => import('./pages/reports/Reports'));\r\nconst Stock = React.lazy(() => import('./pages/Stock/Stock'));\r\nconst Chat = React.lazy(() => import('./pages/chat/Chat'));\r\nconst Login = React.lazy(() => import('./pages/login/Form'));\r\nconst Emp = React.lazy(() => import('./pages/Emp_view/Emp'));\r\nconst CreateTeam = React.lazy(() => import('./pages/create-team/CreateTeam'));\r\nconst GenerateOrderForm = React.lazy(() =>\r\n  import('./pages/orders/GenerateOrderForm')\r\n);\r\nconst Target = React.lazy(() => import('./pages/Target/Target'));\r\nconst Help = React.lazy(() => import('./pages/Help/Help'));\r\nconst Confirm = React.lazy(() => import('./pages/confirmation/Confirm'));\r\nconst Staff = React.lazy(() => import('./pages/Staff_view/Staff'));\r\nconst Manager = React.lazy(() => import('./pages/Manager_view/Manager'));\r\nconst Map = React.lazy(() => import('./pages/Map/Map'));\r\nconst AddMaterial = React.lazy(() =>\r\n  import('./pages/add-material/AddMaterial')\r\n);\r\nconst AddProduct = React.lazy(() => import('./pages/add-product/AddProduct'));\r\nconst AddMachine = React.lazy(() => import('./pages/add-machine/AddMachine'));\r\nconst AddForm = React.lazy(() => import('./pages/add-form/AddForm'));\r\n\r\nif (localStorage.CRM_TOKEN) {\r\n  setAuthToken(localStorage.CRM_TOKEN);\r\n}\r\nfunction App() {\r\n  const [isLoading, setisLoading] = useState(false);\r\n  useEffect(() => {\r\n    setisLoading(false);\r\n    const runActions = async () => {\r\n      await store.dispatch(await LoadUser(history));\r\n      setisLoading(true);\r\n    };\r\n    runActions();\r\n  }, []);\r\n  // useEffect(() => {\r\n  //   if (localStorage.getItem(\"id\")) {\r\n  //     const name = localStorage.getItem(\"id\");\r\n  //     const profile = localStorage.getItem(\"email\");\r\n  //     console.log(\"working jatt\");\r\n  //     socket.emit(\"join\", { name, profile }, error => {\r\n  //       if (error) {\r\n  //         alert(error);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n  if (!isLoading) {\r\n    return (\r\n      <div className=\"loading-final-year\">\r\n        <Loader\r\n          type=\"Rings\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          timeout={3000000} //30 secs\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <div className=\"loading-final-year\">\r\n          <Loader\r\n            type=\"Rings\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={30000} //30 secs\r\n          />\r\n        </div>\r\n      }>\r\n      <Provider store={store}>\r\n        <Router history={history}>\r\n          <ToastContainer />\r\n          <div className=\"app\">\r\n            <Helmet>\r\n              <title> {'DMC'}</title>\r\n            </Helmet>\r\n            {/* <Redirect exact from='/' to='/auth' /> */}\r\n            {/* <PrivateRoute exact path='/user-management' component={Admin} /> */}\r\n            <Route exact path=\"/user-management\" component={Admin} />\r\n            <Route exact path=\"/staff\" component={Staff} />\r\n            {/* <Route exact path='/page2' component={Page2} /> */}\r\n            {/* <Route exact path='/page3' component={Page3} /> */}\r\n            {/* <Route exact path='/page4' component={Page4} /> */}\r\n            {/* <Route exact path='/page5' component={Page5} /> */}\r\n            {/* <Route exact path='/page6' component={Page6} /> */}\r\n            {/* <Route exact path='/ChartEx1' component={ChartEx1} /> */}\r\n            {/* <Route exact path='/ChartEx2' component={ChartEx2} /> */}\r\n            {/* <Route exact path='/ChartEx3' component={ChartEx3} /> */}\r\n            <Route exact path=\"/auth\" component={Auth} />\r\n            <Route exact path='/health-safety' component={HealthSafety} />\r\n            {/* <Route exact path='/loading' component={Loading} /> */}\r\n            {/* <Route exact path='/reports' component={Reports} /> */}\r\n            {/* <Route exact path='/stock' component={Stock} /> */}\r\n            {/* <Route\r\n              exact\r\n              path={[\"/chat\", \"/chat/:id/:displayName\"]}\r\n              component={Chat}\r\n            /> */}\r\n            {/* <Route exact path='/login' component={Login} /> */}\r\n            <Route exact path=\"/emp\" component={Emp} />\r\n            {/* <Route exact path='/target' component={Target} /> */}\r\n            {/* <Route exact path='/help' component={Help} /> */}\r\n            {/* <Route exact path='/confirm' component={Confirm} /> */}\r\n            {/* <Route exact path='/assign-order' component={GenerateOrderForm} /> */}\r\n            <Route exact path=\"/manager\" component={Manager} />\r\n            {/* <Route exact path='/map' component={Map} /> */}\r\n            {/* <Route exact path='/add-material' component={AddMaterial} /> */}\r\n            {/* <Route exact path='/add-product' component={AddProduct} /> */}\r\n            {/* <Route exact path='/create-team' component={CreateTeam} /> */}\r\n            {/* <Route exact path='/add-machine' component={AddMachine} /> */}\r\n            <Route exact path=\"/add-form\" component={AddForm} />\r\n            {/* <Route path='*' component={() => <Redirect to='/auth' />} /> */}\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\learn-gitlab\\client\\src\\store.js",[],"D:\\learn-gitlab\\client\\src\\socketService.js",[],"D:\\learn-gitlab\\client\\src\\history.js",[],"D:\\learn-gitlab\\client\\src\\routing\\PrivateRoute.js",[],"D:\\learn-gitlab\\client\\src\\utils\\setAuthToken.js",[],"D:\\learn-gitlab\\client\\src\\actions\\authActions.js",["313"],"D:\\learn-gitlab\\client\\src\\utils\\Loader.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\healthAndSafety.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\HomePage.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page1.js",["314","315","316","317","318"],"import React from \"react\";\r\nimport Header from \"./../../pages/Header/Header\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport Axios from \"axios\";\r\nimport Swal from \"sweetalert\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Component } from \"react\";\r\n\r\nfunction actionCellRendererAprrove(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Approve </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\n\r\nfunction approveAsManager(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Make Manager </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\n\r\nfunction approveAsAdmin(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Make Admin </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\n\r\nfunction approveAsEmployee(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Make Employee </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\n\r\nclass Admin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [\r\n        {\r\n          headerName: \"Name\",\r\n          field: \"displayName\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Email\", field: \"email\", sortable: true, filter: true },\r\n        // { headerName: \"Profile\", field: \"profile\", sortable: true, filter: true },\r\n        { headerName: \"Status\", field: \"status\", sortable: true, filter: true },\r\n        { headerName: \"Type\", field: \"type\", sortable: true, filter: true },\r\n        {\r\n          headerName: \"Action\",\r\n          minWidth: 150,\r\n          cellRenderer: actionCellRendererAprrove,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n      ],\r\n\r\n      ApproveUserscolumns: [\r\n        {\r\n          headerName: \"Name\",\r\n          field: \"displayName\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Email\", field: \"email\", sortable: true, filter: true },\r\n        // { headerName: \"Profile\", field: \"profile\", sortable: true, filter: true },\r\n        { headerName: \"Status\", field: \"status\", sortable: true, filter: true },\r\n        { headerName: \"Type\", field: \"type\", sortable: true, filter: true },\r\n      ],\r\n\r\n      changeRolesColumns: [\r\n        {\r\n          headerName: \"Name\",\r\n          field: \"displayName\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Email\", field: \"email\", sortable: true, filter: true },\r\n        // { headerName: \"Profile\", field: \"profile\", sortable: true, filter: true },\r\n        { headerName: \"Status\", field: \"status\", sortable: true, filter: true },\r\n        { headerName: \"Type\", field: \"type\", sortable: true, filter: true },\r\n\r\n        {\r\n          headerName: \"Make Employee\",\r\n          minWidth: 150,\r\n          cellRenderer: approveAsEmployee,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n\r\n        {\r\n          headerName: \"Make Manager\",\r\n          minWidth: 150,\r\n          cellRenderer: approveAsManager,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n\r\n        {\r\n          headerName: \"Make Admin\",\r\n          minWidth: 150,\r\n          cellRenderer: approveAsAdmin,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n      ],\r\n\r\n      unApproveUsers: [],\r\n      approveUsers: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getAllUsers();\r\n  }\r\n  getAllUsers = () => {\r\n    Axios.get(`${baseUrl}/auth/getAllUsers`)\r\n      .then((response) => {\r\n        const data = response.data.data;\r\n        console.log(\"data\", data);\r\n        let unApproveUsers = [];\r\n        let approveUsers = [];\r\n        data.forEach((user) => {\r\n          if (user.status == false) {\r\n            unApproveUsers.push(user);\r\n          } else {\r\n            approveUsers.push(user);\r\n          }\r\n        });\r\n        this.setState({\r\n          unApproveUsers,\r\n          approveUsers,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        Swal(error.response.error);\r\n      });\r\n  };\r\n  ApproveUser = (data) => {\r\n    console.log(data);\r\n    const dataToSend = {\r\n      id: data._id,\r\n    };\r\n    Axios.post(`${baseUrl}/auth/approveuser`, dataToSend)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n         this.getAllUsers();\r\n      })\r\n      .catch((error) => {\r\n        Swal(error.response.error);\r\n      });\r\n  };\r\n  onCellClickedApprove = (e) => {\r\n    if (e.colDef.headerName == \"Action\") {\r\n      this.ApproveUser(e.data);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n  updateUserRole = (data) => {\r\n    Axios.post(`${baseUrl}/auth/updateRole`, data)\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n         this.getAllUsers();\r\n\r\n      })\r\n      .catch((error) => {\r\n        Swal(error.response.error);\r\n      });\r\n  };\r\n  onCellClickedChangeRole = (e) => {\r\n    console.log(e.colDef.headerName, e.data);\r\n    let data = null;\r\n    if (e.colDef.headerName == \"Make Manager\") {\r\n      data = {\r\n        id: e.data.id,\r\n        type: \"manager\",\r\n      };\r\n      this.updateUserRole(data);\r\n    } else if (e.colDef.headerName == \"Make Employee\") {\r\n      data = {\r\n        id: e.data.id,\r\n        type: \"employee\",\r\n      };\r\n      this.updateUserRole(data);\r\n    } else if (e.colDef.headerName == \"Make Admin\") {\r\n      data = {\r\n        id: e.data.id,\r\n        type: \"admin\",\r\n      };\r\n      this.updateUserRole(data);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={6} md={6} xs={12}>\r\n              <h3>List of users</h3>\r\n              <div\r\n                className='ag-theme-alpine'\r\n                style={{ height: 400, width: 600 }}\r\n              >\r\n                <AgGridReact\r\n                  rowData={this.state.unApproveUsers}\r\n                  columnDefs={this.state.columns}\r\n                  onCellClicked={this.onCellClickedApprove}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col lg={6} md={6} xs={12}>\r\n              <h3>Role of users</h3>\r\n              <div\r\n                className='ag-theme-alpine'\r\n                style={{ height: 400, width: 600 }}\r\n              >\r\n                <AgGridReact\r\n                  rowData={this.state.approveUsers}\r\n                  columnDefs={this.state.changeRolesColumns}\r\n                  onCellClicked={this.onCellClickedChangeRole}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col lg={1} md={1} xs={12}></Col>\r\n            <Col lg={9} md={9} xs={12}>\r\n              <h3>Approved Users</h3>\r\n              <div\r\n                className='ag-theme-alpine'\r\n                style={{ height: 400, width: \"100%\" }}\r\n              >\r\n                <AgGridReact\r\n                  rowData={this.state.approveUsers}\r\n                  columnDefs={this.state.ApproveUserscolumns}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Admin;\r\n","D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page2.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\manage-view.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page3.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\StaffView.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Page6.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart1.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart2.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\Chart3.js",[],"D:\\learn-gitlab\\client\\src\\components\\Auth\\Auth.js",["319","320","321","322","323"],"/* eslint-disable no-unused-vars */\r\nimport React, { Component } from \"react\";\r\nimport \"./auth.css\";\r\nimport axios from \"axios\";\r\nimport { registerUser, loginUser } from \"../../actions/authActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport { Redirect } from \"react-router\";\r\nclass Authentication extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      type: \"staff\",\r\n      displayName: \"\",\r\n      loginEmail: \"\",\r\n      loginPassword: \"\",\r\n      error: \"\",\r\n      isError: false,\r\n    };\r\n    this.handleEmail = this.handleEmail.bind(this);\r\n    this.handlePassword = this.handlePassword.bind(this);\r\n    this.handleLoginEmail = this.handleLoginEmail.bind(this);\r\n    this.handleLoginPassword = this.handleLoginPassword.bind(this);\r\n    this.handleName = this.handleName.bind(this);\r\n    this.handleConfirmPassword = this.handleConfirmPassword.bind(this);\r\n    this.handleSignup = this.handleSignup.bind(this);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n  }\r\n  handleSignup = async e => {\r\n    e.preventDefault();\r\n    var regex =\r\n      /^([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)[\\\\.]([a-zA-Z]{2,9})$/;\r\n    var passwordRegex = new RegExp(\r\n      \"^(?=.?[A-Z])(?=.?[a-z])(?=.?[0-9])(?=.?[@$!%*#?&]).{7,}$\"\r\n    );\r\n    const { displayName, email, password, confirmPassword } = this.state;\r\n    if (displayName == \"\") {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Name Can Not Be Empty\",\r\n      });\r\n    } else if (email == \"\") {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Email Can Not Be Empty\",\r\n      });\r\n    } else if (!regex.test(email)) {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Please Input A Valid Email\",\r\n      });\r\n    } else if (password == \"\") {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Password Can Not Be Empty\",\r\n      });\r\n    } else if (password !== confirmPassword) {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Password MisMatch\",\r\n      });\r\n    } else {\r\n      //Posting Data\r\n      await this.props.registerUser(this.state, this.props.history);\r\n    }\r\n  };\r\n  handleLogin = async e => {\r\n    e.preventDefault();\r\n    const { loginEmail, loginPassword } = this.state;\r\n    var regex =\r\n      /^([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\\\.]*[0-9a-zA-Z]+)*)[\\\\.]([a-zA-Z]{2,9})$/;\r\n    if (loginEmail == \"\") {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Email Can Not Be Empty\",\r\n      });\r\n    } else if (!regex.test(loginEmail)) {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Please Input A Valid Email\",\r\n      });\r\n    } else if (loginPassword == \"\") {\r\n      this.setState({\r\n        isError: true,\r\n        error: \"Password Can Not Be Empty\",\r\n      });\r\n    } else {\r\n      //posting data for login\r\n      const dataToSend = {\r\n        email: loginEmail,\r\n        password: loginPassword,\r\n      };\r\n      await this.props.loginUser(dataToSend, this.props.history);\r\n    }\r\n  };\r\n\r\n  handleName = e => {\r\n    this.setState({\r\n      displayName: e.target.value,\r\n    });\r\n  };\r\n  handlePassword = e => {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  };\r\n  handleLoginPassword = e => {\r\n    this.setState({\r\n      loginPassword: e.target.value,\r\n    });\r\n  };\r\n  handleConfirmPassword = e => {\r\n    this.setState({\r\n      confirmPassword: e.target.value,\r\n    });\r\n  };\r\n  handleEmail = e => {\r\n    this.setState({\r\n      email: e.target.value,\r\n    });\r\n  };\r\n  handleLoginEmail = e => {\r\n    this.setState({\r\n      loginEmail: e.target.value,\r\n    });\r\n  };\r\n  handleCheck = e => {\r\n    this.setState({\r\n      type: e.target.name,\r\n    });\r\n  };\r\n  handleToggle = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isError: false,\r\n    });\r\n    document.querySelector(\".auth-form-container\").classList.toggle(\"s-signup\");\r\n  };\r\n  render() {\r\n    // if (localStorage.getItem(\"token\")) {\r\n    //   this.props.history.push(\"/\");\r\n    // }\r\n    debugger;\r\n    // if (this.props.isAuth) {\r\n    //   return <Redirect to='/user-management' />;\r\n    // }\r\n    return (\r\n      <>\r\n        <div class='main-form-authentication'>\r\n          <div class='auth-form-container'>\r\n            <div class='auth-form sign-in'>\r\n              <h2 class='heading-auth-form'>Sign In</h2>\r\n              {this.state.isError ? (\r\n                <p style={{ color: \"red\", textAlign: \"center\" }}>\r\n                  {this.state.error}\r\n                </p>\r\n              ) : null}\r\n              <label class='each-label-auth-form'>\r\n                <span class='each-span-auth-form'>Email Address</span>\r\n                <input\r\n                  class='auth-form-input input-text'\r\n                  type='email'\r\n                  name='email'\r\n                  value={this.state.loginEmail}\r\n                  onChange={this.handleLoginEmail}\r\n                />\r\n              </label>\r\n              <label class='each-label-auth-form'>\r\n                <span class='each-span-auth-form'>Password</span>\r\n                <input\r\n                  class='auth-form-input input-text'\r\n                  type='password'\r\n                  name='password'\r\n                  value={this.state.loginPassword}\r\n                  onChange={this.handleLoginPassword}\r\n                />\r\n              </label>\r\n              <button\r\n                class='submit input-button auth-form-button-submit'\r\n                type='button'\r\n                onClick={this.handleLogin}\r\n              >\r\n                Sign In\r\n              </button>\r\n              <p class='forgot-pass'>Forgot Password ?</p>\r\n            </div>\r\n\r\n            <div class='sub-auth-form-container'>\r\n              <div class='auth-form-image'>\r\n                <div class='img-text m-up'>\r\n                  <h2 class='heading-auth-form'>New here?</h2>\r\n                  <p>Sign up and discover great amount of new opportunities!</p>\r\n                </div>\r\n                <div class='img-text m-in'>\r\n                  <h2 class='heading-auth-form'>One of us?</h2>\r\n                  <p>\r\n                    If you already has an account, just sign in. We've missed\r\n                    you!\r\n                  </p>\r\n                </div>\r\n                <div class='img-btn' onClick={this.handleToggle}>\r\n                  <span class='m-up'>Sign Up</span>\r\n                  <span class='m-in'>Sign In</span>\r\n                </div>\r\n              </div>\r\n              <div class='auth-form sign-up'>\r\n                <h2 class='heading-auth-form'>Sign Up</h2>\r\n                {this.state.isError ? (\r\n                  <p style={{ color: \"red\", textAlign: \"center\" }}>\r\n                    {this.state.error}\r\n                  </p>\r\n                ) : null}\r\n                <label class='each-label-auth-form'>\r\n                  <span class='each-span-auth-form'>Name</span>\r\n                  <input\r\n                    class='auth-form-input input-text'\r\n                    type='text'\r\n                    value={this.state.displayName}\r\n                    onChange={this.handleName}\r\n                  />\r\n                </label>\r\n                <label class='each-label-auth-form'>\r\n                  <span class='each-span-auth-form'>Email</span>\r\n                  <input\r\n                    class='auth-form-input input-text'\r\n                    type='email'\r\n                    value={this.state.email}\r\n                    onChange={this.handleEmail}\r\n                  />\r\n                </label>\r\n                <label class='each-label-auth-form'>\r\n                  <span class='each-span-auth-form'>Password</span>\r\n                  <input\r\n                    class='auth-form-input input-text'\r\n                    type='password'\r\n                    value={this.state.password}\r\n                    onChange={this.handlePassword}\r\n                  />\r\n                </label>\r\n                <label class='each-label-auth-form'>\r\n                  <span class='each-span-auth-form'>Confirm Password</span>\r\n                  <input\r\n                    class='auth-form-input input-text'\r\n                    type='password'\r\n                    value={this.state.confirmPassword}\r\n                    onChange={this.handleConfirmPassword}\r\n                  />\r\n                </label>\r\n\r\n                <button\r\n                  type='button'\r\n                  onClick={this.handleSignup}\r\n                  class='submit input-button auth-form-button-submit'\r\n                >\r\n                  Sign Up Now\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  isAuth: state.app.isAuth,\r\n});\r\nexport default connect(mapStateToProps, { registerUser, loginUser })(\r\n  Authentication\r\n);\r\n","D:\\learn-gitlab\\client\\src\\pages\\reports\\Reports.js",[],"D:\\learn-gitlab\\client\\src\\pages\\chat\\Chat.js",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import React, { useState, useEffect } from \"react\";\r\nimport Nav from \"../Header/Header\";\r\nimport { Container } from \"react-bootstrap\";\r\n//socket\r\n//timeago\r\nimport { socket } from \"../../socketService\";\r\nimport TimeAgo from \"react-timeago\";\r\nimport { convertDate } from \"./../../utils/functions\";\r\nimport \"./Chat.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport Axios from \"axios\";\r\n\r\nimport { baseUrl, baseFileUrl } from \"./../../baseUrl\";\r\nlet chatSender = null;\r\nlet chatReciever = null;\r\nlet activeChat = null;\r\nconst Chat = (props) => {\r\n  const [myChats, setmyChats] = useState([]);\r\n  const [userChat, setuserChat] = useState([]);\r\n  const [searchedUsers, setSearchedUsers] = useState([]);\r\n  const [isChats, setIsChats] = useState(true);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [reciever, setreciever] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [isReciever, setIsReciever] = useState(false);\r\n  const [sender, setSender] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (result) => {\r\n      if (result.reciever == chatSender && result.sender == chatReciever) {\r\n        setMessages((messages) => [...messages, result]);\r\n        // $(\".msg_history\")\r\n        //   .stop()\r\n        //   .animate({ scrollTop: $(\".msg_history\")[0].scrollHeight }, 1000);\r\n      } else if (result.sender == chatSender) {\r\n        setMessages((messages) => [...messages, result]);\r\n        // $(\".msg_history\")\r\n        //   .stop()\r\n        //   .animate({ scrollTop: $(\".msg_history\")[0].scrollHeight }, 1000);\r\n      } else {\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (message) {\r\n      const data = {\r\n        sender: sender,\r\n        reciever: reciever,\r\n        message: message,\r\n      };\r\n\r\n      socket.emit(\"sendMessage\", data);\r\n      setMessage(\"\");\r\n      Axios.post(baseUrl + \"/chats/sendMessage\", data, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n        .then((response) => {})\r\n        .catch((error) => {\r\n          console.log(error.response.data);\r\n        });\r\n    }\r\n  };\r\n\r\n  const getSingleChat = (senders, reciever) => {\r\n    Axios.get(baseUrl + \"/chats/getUserChat\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n      params: {\r\n        sender: senders,\r\n        reciever: reciever,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setuserChat(response.data.data);\r\n        setMessages(response.data.data[0].messages);\r\n        // $(\".msg_history\")\r\n        //   .stop()\r\n        //   .animate({ scrollTop: $(\".msg_history\")[0].scrollHeight }, 1000);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let recieverId = props.match.params.id;\r\n    let reciverdisplayName = props.match.params.displayName;\r\n    activeChat = reciverdisplayName;\r\n    setSender(localStorage.getItem(\"id\"));\r\n\r\n    chatSender = localStorage.getItem(\"id\");\r\n    chatReciever = recieverId;\r\n    setreciever(recieverId);\r\n\r\n    if (recieverId) {\r\n      getSingleChat(localStorage.getItem(\"id\"), recieverId);\r\n      setIsReciever(true);\r\n    } else {\r\n      setIsReciever(false);\r\n    }\r\n    Axios.get(baseUrl + \"/chats/getAllChats\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setmyChats(response.data.data);\r\n      })\r\n      .catch((error) => {});\r\n  }, []);\r\n  const getSearchedUsers = (searchedKeyword) => {\r\n    console.log(\"searched\", searchedKeyword);\r\n    Axios.get(baseUrl + `/auth/searchUsers?displayName=${searchedKeyword}`, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        console.log(\"response from search\", response);\r\n        setSearchedUsers(response.data.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const getUserChat = (chat) => {\r\n    if (chat.sender.id === sender) {\r\n      setreciever(chat.reciever.id);\r\n      activeChat = chat.reciever.displayName;\r\n      chatReciever = chat.reciever.id;\r\n    } else {\r\n      setreciever(chat.sender.id);\r\n      chatReciever = chat.sender.id;\r\n      activeChat = chat.sender.displayName;\r\n    }\r\n    getSingleChat(chat.sender.id, chat.reciever.id);\r\n  };\r\n  return (\r\n    <div>\r\n      <Nav></Nav>\r\n      <Container fluid>\r\n        <div class='container-fluid h-100'>\r\n          <div class='row justify-content-center h-100'>\r\n            <div class='col-md-4 col-xl-3 chat'>\r\n              <div class='card mb-sm-3 mb-md-0 contacts_card'>\r\n                <div class='card-header'>\r\n                  <div class='input-group'>\r\n                    <input\r\n                      onChange={(e) => {\r\n                        if (e.target.value !== \"\") {\r\n                          setIsChats(false);\r\n                          getSearchedUsers(e.target.value);\r\n                          setSearch(e.target.value);\r\n                        } else {\r\n                          setIsChats(true);\r\n                          setSearch(e.target.value);\r\n                        }\r\n                      }}\r\n                      value={search}\r\n                      type='text'\r\n                      placeholder='Search...'\r\n                      name=''\r\n                      class='form-control search'\r\n                    />\r\n                    <div class='input-group-prepend'>\r\n                      <span class='input-group-text search_btn'>\r\n                        <i class='fas fa-search'></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class='card-body contacts_body'>\r\n                  <ui class='contacts'>\r\n                    {isChats ? (\r\n                      myChats.length > 0 ? (\r\n                        myChats.map((chat) => {\r\n                          return (\r\n                            <li\r\n                              key={chat._id}\r\n                              onClick={(e) => getUserChat(chat)}\r\n                            >\r\n                              <div class='d-flex bd-highlight'>\r\n                                <div class='img_cont'>\r\n                                  <img\r\n                                    src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                                    class='rounded-circle user_img'\r\n                                  />\r\n                                </div>\r\n                                <div class='user_info'>\r\n                                  <span>\r\n                                    {\" \"}\r\n                                    {chat.sender.id === sender\r\n                                      ? chat.reciever.displayName\r\n                                      : chat.sender.displayName}\r\n                                  </span>\r\n                                  <p>{chat.lastMessageText}</p>\r\n                                  <span className='chat_date'>\r\n                                    <TimeAgo date={chat.lastMessageTime} />{\" \"}\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                            </li>\r\n                          );\r\n                        })\r\n                      ) : (\r\n                        <li>\r\n                          <div class='d-flex bd-highlight'>\r\n                            <div class='user_info'>\r\n                              <span>Empty Chat</span>\r\n                              <p>Search Users And Chat</p>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      )\r\n                    ) : searchedUsers.length > 0 ? (\r\n                      searchedUsers.map((user) => {\r\n                        return (\r\n                          <a\r\n                            href={`/chat/${user._id}/${user.displayName}`}\r\n                            style={{ textDecoration: \"none\", color: \"white\" }}\r\n                          >\r\n                            <li key={user._id}>\r\n                              <div class='d-flex bd-highlight'>\r\n                                <div class='img_cont'>\r\n                                  <img\r\n                                    src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                                    class='rounded-circle user_img'\r\n                                  />\r\n                                </div>\r\n                                <div class='user_info'>\r\n                                  <span> {user.displayName}</span>\r\n                                  <p>{user.email}</p>\r\n                                </div>\r\n                              </div>\r\n                            </li>\r\n                          </a>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <li>\r\n                        <div class='d-flex bd-highlight'>\r\n                          <div class='user_info'>\r\n                            <span>Searching</span>\r\n                            <p>No User Found...</p>\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                    )}\r\n                  </ui>\r\n                </div>\r\n                <div class='card-footer'></div>\r\n              </div>\r\n            </div>\r\n            <div class='col-md-8 col-xl-6 chat'>\r\n              <div class='card'>\r\n                <div class='card-header msg_head'>\r\n                  <div class='d-flex bd-highlight'>\r\n                    <div class='img_cont'>\r\n                      <img\r\n                        src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                        class='rounded-circle user_img'\r\n                      />\r\n                      <span class='online_icon'></span>\r\n                    </div>\r\n                    <div class='user_info'>\r\n                      {activeChat == null ? (\r\n                        <span>Select Chat</span>\r\n                      ) : (\r\n                        <span>Chat with {activeChat}</span>\r\n                      )}\r\n\r\n                      <p>{messages.length} Messages</p>\r\n                    </div>\r\n                  </div>\r\n                  <span id='action_menu_btn'>\r\n                    <i class='fas fa-ellipsis-v'></i>\r\n                  </span>\r\n                </div>\r\n                <div class='card-body msg_card_body'>\r\n                  {messages.length > 0 ? (\r\n                    messages.map((message) => {\r\n                      return message.sender === sender ? (\r\n                        <div\r\n                          key={message._id}\r\n                          class='d-flex justify-content-end mb-4'\r\n                        >\r\n                          <div class='msg_cotainer_send'>\r\n                            {message.text}\r\n                            <span class='msg_time_send'>\r\n                              {convertDate(message.createdAt)}\r\n                            </span>\r\n                          </div>\r\n                          <div class='img_cont_msg'>\r\n                            <img\r\n                              src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                              class='rounded-circle user_img_msg'\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <div\r\n                          key={message._id}\r\n                          class='d-flex justify-content-start mb-4'\r\n                        >\r\n                          <div class='img_cont_msg'>\r\n                            <img\r\n                              src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                              class='rounded-circle user_img_msg'\r\n                            />\r\n                          </div>\r\n                          <div class='msg_cotainer'>\r\n                            {message.text}\r\n                            <span class='msg_time'>\r\n                              {convertDate(message.createdAt)}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div class='d-flex justify-content-start mb-4'>\r\n                      <div class='img_cont_msg'>\r\n                        <img\r\n                          src='https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg'\r\n                          class='rounded-circle user_img_msg'\r\n                        />\r\n                      </div>\r\n                      <div class='msg_cotainer'>\r\n                        Empty Inbox\r\n                        <span class='msg_time'>Now</span>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div class='card-footer'>\r\n                  <div class='input-group'>\r\n                    {/* <div class='input-group-append'>\r\n                      <span class='input-group-text attach_btn'>\r\n                        <i class='fas fa-paperclip'></i>\r\n                      </span>\r\n                    </div> */}\r\n                    <textarea\r\n                      name=''\r\n                      class='form-control type_msg'\r\n                      placeholder='Type your message...'\r\n                      value={message}\r\n                      onChange={({ target: { value } }) => setMessage(value)}\r\n                      onKeyPress={(event) =>\r\n                        event.key === \"Enter\" ? sendMessage(event) : null\r\n                      }\r\n                    ></textarea>\r\n                    <div class='input-group-append'>\r\n                      <span class='input-group-text send_btn'>\r\n                        <i class='fas fa-location-arrow'></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","D:\\learn-gitlab\\client\\src\\pages\\Stock\\Stock.js",["339","340","341"],"import React from \"react\";\r\nimport Nav from \"../Header/Header\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Modal,\r\n  Button,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport \"../reports/Reports.css\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nfunction actionCellRenderer(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Accept </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\n\r\nfunction reejectButtonRendrer(params) {\r\n  let eGui = document.createElement(\"div\");\r\n\r\n  eGui.innerHTML = `\r\n<Button variant=\"primary\" data-action=\"Accept\" > Reject </Button>\r\n`;\r\n\r\n  return eGui;\r\n}\r\nclass Stock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: false,\r\n      productToReject: 0,\r\n      rejectId: null,\r\n      totalProduced: -1,\r\n      rawMaterialColumns: [\r\n        {\r\n          headerName: \"Id\",\r\n          field: \"id\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Raw Material Count\",\r\n          field: \"count\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Machine\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Raw Material Type\",\r\n          field: \"type\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true },\r\n        {\r\n          headerName: \"Action\",\r\n          minWidth: 150,\r\n          cellRenderer: actionCellRenderer,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n      ],\r\n      stocksColumns: [\r\n        {\r\n          headerName: \"Raw Material Count\",\r\n          field: \"count\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Machine\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Raw Material Type\",\r\n          field: \"type\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true },\r\n      ],\r\n      totalProductsProducingColumns: [\r\n        {\r\n          headerName: \"Id\",\r\n          field: \"id\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Product Count\",\r\n          field: \"count\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Machine\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Product\",\r\n          field: \"product\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true },\r\n        {\r\n          headerName: \"Action\",\r\n          minWidth: 150,\r\n          cellRenderer: reejectButtonRendrer,\r\n          editable: false,\r\n          colId: \"action\",\r\n        },\r\n      ],\r\n      rawMaterials: [],\r\n      totalProductsProduced: [],\r\n      stocks: [],\r\n    };\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleRejectProducts = this.handleRejectProducts.bind(this);\r\n  }\r\n  handleRejectProducts = (e) => {\r\n    e.preventDefault();\r\n    const { totalProduced, rejectId, productToReject } = this.state;\r\n    if (totalProduced < productToReject) {\r\n      alert(\"Rejection Quantity Exceeed\");\r\n      return;\r\n    }\r\n    const dataToSend = {\r\n      id: rejectId,\r\n      count: productToReject,\r\n    };\r\n\r\n    Axios.post(baseUrl + \"/products/rejectProductsCount\", dataToSend, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        this.setState({\r\n          show: false,\r\n          productToReject: 0,\r\n          totalProduced: -1,\r\n          rejectId: null,\r\n        });\r\n        this.getConfirmedProducts();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  handleClose = (e) => {\r\n    this.setState({\r\n      show: false,\r\n    });\r\n  };\r\n  updateToStock = (id) => {\r\n    const dataToSend = {\r\n      id: id,\r\n    };\r\n    Axios.post(baseUrl + \"/rawMaterials/putInStock\", dataToSend, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        this.getRawMaterials();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  onCellClicked = (e) => {\r\n    console.log(\"clicked\", e, e.data);\r\n    const id = e.data.id;\r\n    if (e.colDef.headerName == \"Action\") {\r\n      if (!id) {\r\n        return;\r\n      }\r\n      this.updateToStock(id);\r\n    } else {\r\n    }\r\n  };\r\n  onCellClickedReject = (e) => {\r\n    console.log(\"clicked\", e.data);\r\n    const id = e.data.id;\r\n    console.log(id);\r\n    if (e.colDef.headerName == \"Action\") {\r\n      if (!id) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        rejectId: id,\r\n        show: true,\r\n        totalProduced: e.data.count,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  getConfirmedProducts = () => {\r\n    Axios.get(baseUrl + \"/products/getProductsProduced\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const data = response.data.data;\r\n        let totalProductsProduced = [];\r\n        data.forEach((product) => {\r\n          totalProductsProduced.push({\r\n            id: product._id,\r\n            count: product.count,\r\n            machine: product.machine.name,\r\n            product: product.product.name,\r\n            date: moment().format(\"llll\", product.date),\r\n          });\r\n        });\r\n        this.setState({\r\n          totalProductsProduced: totalProductsProduced,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  getRawMaterials = () => {\r\n    Axios.get(baseUrl + \"/rawMaterials/getAllRawMaterials\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const data = response.data.data;\r\n        console.log(\"data\", data);\r\n        let rawMaterials = [];\r\n        let stocks = [];\r\n        data.forEach((material) => {\r\n          if (material.status == true) {\r\n            stocks.push({\r\n              count: material.count,\r\n              machine: material.machine.name,\r\n              type: material.type,\r\n              date: moment().format(\"llll\", material.date),\r\n            });\r\n          } else {\r\n            rawMaterials.push({\r\n              id: material._id,\r\n              count: material.count,\r\n              machine: material.machine.name,\r\n              type: material.type,\r\n              date: moment().format(\"llll\", material.date),\r\n            });\r\n          }\r\n        });\r\n        this.setState({\r\n          rawMaterials: rawMaterials,\r\n          stocks: stocks,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getConfirmedProducts();\r\n    this.getRawMaterials();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav></Nav>\r\n        <Container fluid>\r\n          <h1 className='p-3 text-center text-danger'>Product At Low Amount</h1>\r\n          <Row>\r\n            <Col md={{ span: 10, offset: 1 }} className='mt-3'>\r\n              <div\r\n                className='ag-theme-alpine'\r\n                style={{ height: 400, width: 600 }}\r\n              >\r\n                <AgGridReact\r\n                  rowData={this.state.rawMaterials}\r\n                  columnDefs={this.state.rawMaterialColumns}\r\n                  onCellClicked={this.onCellClicked}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 5, offset: 1 }} sm={12}>\r\n              <h1 className='p-3 text-center'>In Stock</h1>\r\n              <ListGroup>\r\n                <div\r\n                  className='ag-theme-alpine'\r\n                  style={{ height: 400, width: 600 }}\r\n                >\r\n                  <AgGridReact\r\n                    rowData={this.state.stocks}\r\n                    columnDefs={this.state.stocksColumns}\r\n                  />\r\n                </div>\r\n              </ListGroup>\r\n            </Col>\r\n            <Col md={{ span: 5 }} sm={12}>\r\n              <h1 className='p-3 text-center'>Production Done</h1>\r\n              <ListGroup>\r\n                <div\r\n                  className='ag-theme-alpine'\r\n                  style={{ height: 400, width: 600 }}\r\n                >\r\n                  <AgGridReact\r\n                    rowData={this.state.totalProductsProduced}\r\n                    columnDefs={this.state.totalProductsProducingColumns}\r\n                    onCellClicked={this.onCellClickedReject}\r\n                  />\r\n                </div>\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* Model Starts */}\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Enter The Quantity To Reject</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='Quantity'\r\n                  value={this.state.productToReject}\r\n                  onChange={(e) => {\r\n                    this.setState({\r\n                      productToReject: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant='secondary' onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant='primary' onClick={this.handleRejectProducts}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        {/* Model End */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stock;\r\n","D:\\learn-gitlab\\client\\src\\pages\\login\\Form.js",["342","343"],"import React, { useState } from 'react'\r\nimport Nav from '../Header/Header'\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap'\r\nimport './Form.css'\r\nconst Form = () => {\r\n    const [registrationFormStatus, setRegistartionFormStatus] = useState(false);\r\n    const loginProps = useSpring({\r\n        left: registrationFormStatus ? -500 : 0, // Login form sliding positions\r\n    });\r\n    const registerProps = useSpring({\r\n        left: registrationFormStatus ? 0 : 500, // Register form sliding positions \r\n    });\r\n\r\n    const loginBtnProps = useSpring({\r\n        borderBottom: registrationFormStatus\r\n            ? \"solid 0px transparent\"\r\n            : \"solid 2px #1059FF\",  //Animate bottom border of login button\r\n    });\r\n    const registerBtnProps = useSpring({\r\n        borderBottom: registrationFormStatus\r\n            ? \"solid 2px #1059FF\"\r\n            : \"solid 0px transparent\", //Animate bottom border of register button\r\n    });\r\n\r\n    function registerClicked() {\r\n        setRegistartionFormStatus(true);\r\n    }\r\n    function loginClicked() {\r\n        setRegistartionFormStatus(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Nav></Nav>\r\n            <Container >\r\n                <h1 className='p-4 text-center'>Register</h1>\r\n                <Row className='mt-3'>\r\n                    <Col sm={12} md={{ span: 10, offset: 1 }} >\r\n                        <div className=\"login-register-wrapper\">\r\n                            <div className=\"nav-buttons\">\r\n                                <animated.button\r\n                                    onClick={loginClicked}\r\n                                    id=\"loginBtn\"\r\n                                    style={loginBtnProps}\r\n                                    className='btn btn-block scroll-btn'\r\n                                >\r\n                                    Login\r\n                                </animated.button>\r\n                                <animated.button\r\n                                    onClick={registerClicked}\r\n                                    id=\"registerBtn\"\r\n                                    style={registerBtnProps}\r\n                                    className='btn btn-block scroll-btn'\r\n                                >\r\n                                    Register\r\n                                </animated.button>\r\n                            </div>\r\n                            <div className=\"form-group form-group1 \">\r\n                                <animated.form action=\"\" id=\"loginform\" style={loginProps}>\r\n                                    <LoginForm />\r\n                                </animated.form>\r\n                                <animated.form action=\"\" id=\"registerform\" style={registerProps}>\r\n                                    <RegisterForm />\r\n                                </animated.form>\r\n                            </div>\r\n                            <animated.div className=\"forgot-panel\" style={loginProps}>\r\n                                <a herf=\"#\">Forgot your password</a>\r\n                            </animated.div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nfunction LoginForm() {\r\n    return (\r\n        <React.Fragment>\r\n            <label for=\"username\">USERNAME</label>\r\n            <input type=\"text\" id=\"username\" />\r\n            <label for=\"password\">PASSWORD</label>\r\n            <input type=\"text\" id=\"password\" />\r\n            <input type=\"submit\" value=\"submit\" className=\"submit\" />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction RegisterForm() {\r\n    return (\r\n        <React.Fragment>\r\n            <label for=\"fullname\">full name</label>\r\n            <input type=\"text\" id=\"fullname\" />\r\n            <label for=\"email\">email</label>\r\n            <input type=\"text\" id=\"email\" />\r\n            <label for=\"password\">password</label>\r\n            <input type=\"text\" id=\"password\" />\r\n            <label for=\"confirmpassword\">confirm password</label>\r\n            <input type=\"text\" id=\"confirmpassword\" />\r\n            <input type=\"submit\" value=\"submit\" class=\"submit\" />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default Form\r\n","D:\\learn-gitlab\\client\\src\\pages\\Emp_view\\Emp.js",["344","345","346","347"],"D:\\learn-gitlab\\client\\src\\pages\\create-team\\CreateTeam.js",["348","349","350","351","352","353","354"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport Nav from '../Header/Header'\r\nimport { Container, Row, Col, ListGroup, Table, InputGroup, FormCheck, ProgressBar } from 'react-bootstrap'\r\nimport { response } from 'express';\r\nimport Swal from 'sweetalert'\r\n\r\nconst CreateTeam = () => {\r\n    const [employees, setEmployees] = useState([]);\r\n    useEffect(() => {\r\n        axios.get(baseUrl + \"/auth/getAllEmployees\", {\r\n            headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n            },\r\n        }).then((response) => {\r\n            setEmployees(response.data);\r\n            console.log(employees)\r\n\r\n        }).catch((error) => {\r\n            Swal('error in fetching employees')\r\n        })\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <Nav></Nav>\r\n            <Container>\r\n                <h1>Staff view</h1>\r\n                <Row className='mt-5'>\r\n                    <Col md={12} sm={12}>\r\n                        <ListGroup as=\"ul\" className='mt-3'>\r\n                            <li className=\"list-group-item bg-sky text-white\"><strong>Teams</strong></li>\r\n                            <li className=\"list-group-item d-flex justify-content-between\">\r\n                                <span>name</span>\r\n                                <span>email</span>\r\n                            </li>\r\n                        </ListGroup>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTeam\r\n","D:\\learn-gitlab\\client\\src\\pages\\orders\\GenerateOrderForm.js",["355","356","357","358","359"],"D:\\learn-gitlab\\client\\src\\pages\\Target\\Target.js",["360","361","362"],"import React, { Component } from \"react\";\r\nimport Nav from \"../Header/Header\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Table,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport \"./Target.css\";\r\nimport MyChart from \"../../components/Dashboard/Chart2\";\r\nclass Target extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns: [\r\n        {\r\n          headerName: \"Machine Id\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Name\",\r\n          field: \"name\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Stop Time\",\r\n          field: \"stopTime\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n      ],\r\n      activeMachines: [],\r\n      disabledMachines: [],\r\n    };\r\n    this.handleUpdateMachineTarget = this.handleUpdateMachineTarget.bind(this);\r\n    this.handleChangeMachineTarget = this.handleChangeMachineTarget.bind(this);\r\n  }\r\n\r\n  handleChangeMachineTarget = (id) => (e) => {\r\n    let activeMachines = this.state.activeMachines;\r\n    activeMachines.forEach((machine) => {\r\n      if (machine._id == id) {\r\n        machine.target = e.target.value;\r\n      }\r\n    });\r\n    this.setState({\r\n      activeMachines,\r\n    });\r\n  };\r\n  handleUpdateMachineTarget = (machine) => (e) => {\r\n    console.log(machine);\r\n    const dataToSend = {\r\n      id: machine._id,\r\n      target: machine.target,\r\n    };\r\n    axios\r\n      .post(baseUrl + \"/machines/updateMachineTarget\", dataToSend, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then((response) => {\r\n        this.setState({\r\n          isLoading: false,\r\n        });\r\n        this.getActiveMachines();\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isError: true,\r\n          error: error.response.data.error,\r\n        });\r\n      });\r\n  };\r\n\r\n  getActiveMachines = () => {\r\n    axios\r\n      .get(baseUrl + \"/machines/getAllMachines\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then((response) => {\r\n        this.setState({\r\n          activeMachines: response.data.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isError: true,\r\n          error: error.response.data.error,\r\n        });\r\n      });\r\n  };\r\n\r\n  getMaintananceMoodMachines = () => {\r\n    axios\r\n      .get(baseUrl + \"/machines/getMaintainanceMoodMachines\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        let data = response.data.data;\r\n        let machines = [];\r\n\r\n        data.forEach((machine) => {\r\n          machines.push({\r\n            machine: machine._id,\r\n            name: machine.name,\r\n            stopTime: moment().format(\"llll\", machine.stopTime),\r\n          });\r\n        });\r\n        this.setState({\r\n          disabledMachines: machines,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isError: true,\r\n          error: error.response.data.error,\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getActiveMachines();\r\n    this.getMaintananceMoodMachines();\r\n  }\r\n  getRandomBackground = () => {\r\n    let backgrounds = [\"bg-danger\", \"bg-warning\", \"bg-success\", \"bg-secondary\"];\r\n    return backgrounds[Math.floor(Math.random() * backgrounds.length)];\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav></Nav>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col md={12} sm={12} className='bg-sky mt-5 '>\r\n              <h1>Targets</h1>\r\n              <Row className='mt-5'>\r\n                {this.state.activeMachines.map((machine) => {\r\n                  return (\r\n                    <Col md={3} sm={12}>\r\n                      <div\r\n                        key={machine._id}\r\n                        className={`${this.getRandomBackground()} d-flex justify-content-between my-card`}\r\n                      >\r\n                        <div className='d-flex flex-column'>\r\n                          <span className='my-card-number font-weight-bold text-white'>\r\n                            {machine.target}\r\n                          </span>\r\n                          <span className='text-white'>{machine.name}</span>\r\n                        </div>\r\n                        <div>\r\n                          <i className='fa fa-headphones fa-2x text-white'></i>\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              </Row>\r\n              <Row>\r\n                <Col\r\n                  md={12}\r\n                  sm={12}\r\n                  className='chart'\r\n                  style={{ marginTop: \"20px\" }}\r\n                >\r\n                  {/* <MyChart></MyChart> */}\r\n                  <Table striped bordered hover>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Machine Name</th>\r\n                        <th>Target </th>\r\n                        <th>Action</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {this.state.activeMachines.map((machine) => {\r\n                        return (\r\n                          <tr key={machine._id}>\r\n                            <td>{machine.name}</td>\r\n                            <td>{machine.target}</td>\r\n                            <td>\r\n                              <InputGroup className='mb-3'>\r\n                                <FormControl\r\n                                  placeholder='Target'\r\n                                  aria-label=''\r\n                                  type='number'\r\n                                  value={machine.target}\r\n                                  onChange={this.handleChangeMachineTarget(\r\n                                    machine._id\r\n                                  )}\r\n                                  aria-describedby='basic-addon2'\r\n                                />\r\n                                <InputGroup.Append>\r\n                                  <Button\r\n                                    onClick={this.handleUpdateMachineTarget(\r\n                                      machine\r\n                                    )}\r\n                                    variant='secondary'\r\n                                  >\r\n                                    Update Target\r\n                                  </Button>\r\n                                </InputGroup.Append>\r\n                              </InputGroup>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 4, offset: 3 }} sm={12}>\r\n              <div\r\n                className='ag-theme-alpine'\r\n                style={{ height: 200, width: 700 }}\r\n              >\r\n                <h1 className='mt-5'>Maintanance Machines List</h1>\r\n                <AgGridReact\r\n                  rowData={this.state.disabledMachines}\r\n                  columnDefs={this.state.columns}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Target;\r\n","D:\\learn-gitlab\\client\\src\\pages\\Help\\Help.js",[],"D:\\learn-gitlab\\client\\src\\pages\\Staff_view\\Staff.js",["363","364","365"],"D:\\learn-gitlab\\client\\src\\pages\\confirmation\\Confirm.js",["366","367","368","369"],"import React, { Component } from \"react\";\r\nimport Nav from \"../Header/Header\";\r\nimport moment from \"moment\";\r\nimport Axios from \"axios\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Table,\r\n  InputGroup,\r\n  FormCheck,\r\n  ProgressBar,\r\n} from \"react-bootstrap\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\n\r\nclass Confirm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rawMaterialColumns: [\r\n        {\r\n          headerName: \"Raw Material Count\",\r\n          field: \"count\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Machine\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Raw Material Type\",\r\n          field: \"type\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true },\r\n      ],\r\n      totalProductsProducingColumns: [\r\n        {\r\n          headerName: \"Product Count\",\r\n          field: \"count\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Machine\",\r\n          field: \"machine\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n        {\r\n          headerName: \"Product\",\r\n          field: \"product\",\r\n          sortable: true,\r\n          filter: true,\r\n        },\r\n\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true },\r\n      ],\r\n      rawMaterials: [],\r\n      totalProductsProduced: [],\r\n    };\r\n  }\r\n\r\n  getConfirmedProducts = () => {\r\n    Axios.get(baseUrl + \"/products/getProductsProduced\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const data = response.data.data;\r\n        let totalProductsProduced = [];\r\n        data.forEach((product) => {\r\n          totalProductsProduced.push({\r\n            count: product.count,\r\n            machine: product.machine.name,\r\n            product: product.product.name,\r\n            date: moment().format(\"llll\", product.date),\r\n          });\r\n        });\r\n        this.setState({\r\n          totalProductsProduced: totalProductsProduced,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  getRawMaterials = () => {\r\n    Axios.get(baseUrl + \"/rawMaterials/getAllRawMaterials\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const data = response.data.data;\r\n        let rawMaterials = [];\r\n        data.forEach((material) => {\r\n          rawMaterials.push({\r\n            count: material.count,\r\n            machine: material.machine.name,\r\n            type: material.type,\r\n            date: moment().format(\"llll\", material.date),\r\n          });\r\n        });\r\n        this.setState({\r\n          rawMaterials: rawMaterials,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getConfirmedProducts();\r\n    this.getRawMaterials();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav></Nav>\r\n        <Container>\r\n          <h1 className='mt-3'>Confirmation</h1>\r\n          <Row className='mt-3'>\r\n            <Col md={12} sm={12}>\r\n              <ListGroup variant='flush'>\r\n                <ListGroup.Item\r\n                  className='active font-weight-bold'\r\n\r\n                >\r\n                  Confirmed products\r\n                </ListGroup.Item>\r\n                <div\r\n                  className='ag-theme-alpine'\r\n                  style={{ height: 400, width: 1110 }}\r\n                >\r\n                  <AgGridReact\r\n                    rowData={this.state.totalProductsProduced}\r\n                    columnDefs={this.state.totalProductsProducingColumns}\r\n                  />\r\n                </div>\r\n              </ListGroup>\r\n            </Col>\r\n\r\n          </Row>\r\n          <Row>\r\n            <Col md={8} sm={12}>\r\n              <ListGroup className='mt-5' variant='flush'>\r\n                <ListGroup.Item\r\n                  className='active font-weight-bold '\r\n                  style={{ width: 1110 }}\r\n                >\r\n                  Stock list\r\n                </ListGroup.Item>\r\n                <div\r\n                  className='ag-theme-alpine'\r\n                  style={{ height: 400, width: 1110 }}\r\n                >\r\n                  <AgGridReact\r\n                    rowData={this.state.rawMaterials}\r\n                    columnDefs={this.state.rawMaterialColumns}\r\n                  />\r\n                </div>\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Confirm;\r\n","D:\\learn-gitlab\\client\\src\\pages\\Map\\Map.js",["370","371","372","373","374","375","376"],"import React from 'react'\r\nimport { GoogleMap, Marker } from \"react-google-maps\"\r\nimport Calendar from 'react-calendar';\r\nimport './Map.css'\r\nimport { Container, Row, Col, ListGroup, Table, InputGroup, FormCheck, ProgressBar } from 'react-bootstrap'\r\nimport Nav from '../Header/Header'\r\nconst Map = () => {\r\n    return (\r\n        <div>\r\n            <Nav></Nav>\r\n            <Container>\r\n                <h1>Map</h1>\r\n                <Row className='mt-5'>\r\n                    <Col md={12} sm={12}>\r\n\r\n                        <img style={{ width: '100%', height: '30%' }} src=\"https://i.pinimg.com/originals/16/0c/b9/160cb9d8b7bd8eb2da7004de84748233.png\" alt=\"\" />\r\n                        <button className=\"btn btn-warning mt-3\">Edit Or Move</button>\r\n                        <div className=\"mt-3\">\r\n                            <ListGroup as=\"ul\">\r\n                                <ListGroup.Item as=\"li\" active>\r\n                                    List of targets\r\n                            </ListGroup.Item>\r\n                                <ListGroup.Item as=\"li\">Dapibus ac facilisis in</ListGroup.Item>\r\n                                <ListGroup.Item as=\"li\" disabled>\r\n                                    Morbi leo risus\r\n                            </ListGroup.Item>\r\n                                <ListGroup.Item as=\"li\">Porta ac consectetur ac</ListGroup.Item>\r\n                            </ListGroup>\r\n\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\Manager.js",["377","378"],"import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport { getStaff, getEmployeeAndStaff } from '../../actions/staffAction';\r\nimport { getUser } from '../../actions/userActions';\r\nimport { getAllTeams } from '../../actions/teamsActions';\r\nimport { getAllProject } from '../../actions/projectActions';\r\nimport Loader from 'react-loader-spinner';\r\nimport { Badge, CardText } from 'reactstrap';\r\nimport moment from 'moment';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport Nav from '../Header/Header';\r\nimport { Container, Row, Col, ListGroup, Table, Button } from 'react-bootstrap';\r\nimport MyChart from '../../components/Dashboard/Chart3';\r\nimport AddTeamModal from './components/AddteamModel/AddTeamModel';\r\nimport AddProjectModal from './components/AddProject/AddProjectModal';\r\nimport AssignModal from './components/AssgnModal/AssignModal';\r\nimport './Manager.css';\r\n\r\nconst Manager = ({\r\n  getUser,\r\n  employees,\r\n  getEmployeeAndStaff,\r\n  getAllTeams,\r\n  teams,\r\n  getAllProject,\r\n  projects,\r\n  getStaff,\r\n  employeeAndStaff,\r\n  staff\r\n}) => {\r\n  useEffect(() => {\r\n    const runActions = async () => {\r\n      setLoading(false);\r\n      await getUser();\r\n      await getEmployeeAndStaff();\r\n      await getAllTeams();\r\n      await getAllProject();\r\n      await getStaff();\r\n      setLoading(true);\r\n    };\r\n    runActions();\r\n  }, []);\r\n  console.log(employees);\r\n  // const { employees } = useSelector(({ app }) => ({\r\n  //   employees: app.employees,\r\n  // }));\r\n  const [calenderDate, setcalenderDate] = useState(new Date());\r\n  const [Loading, setLoading] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n  const [modalProject, setModalProject] = useState(false);\r\n  const [modalAssign, setmodalAssign] = useState(null);\r\n  useEffect(() => {\r\n    setmodalAssign(\r\n      Array(teams.length)\r\n        .fill()\r\n        .map((v, i) => false)\r\n    );\r\n  }, [teams]);\r\n  const toggle = () => setModal(!modal);\r\n  const toggleProject = () => setModalProject(!modalProject);\r\n  const toggleAssign = (i) => {\r\n    let form = [...modalAssign];\r\n    form[i] = !form[i];\r\n    setmodalAssign(form);\r\n  };\r\n  const handleCalendarChange = (calenderDate) => {\r\n    debugger;\r\n    setcalenderDate(new Date(calenderDate));\r\n  };\r\n  if (!Loading)\r\n    return (\r\n      <div className=\"loading-final-year\">\r\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={100} width={100} />\r\n      </div>\r\n    );\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Nav></Nav>\r\n        <Container>\r\n          <h1>Manager view</h1>\r\n          <Row className=\"mt-5\">\r\n            <Col md={3} sm={12}>\r\n              <Calendar\r\n                onChange={handleCalendarChange}\r\n                value={calenderDate}\r\n                tileClassName={({ date, view }) => {\r\n                  if (\r\n                    projects.find(\r\n                      (x) =>\r\n                        !x.isCompleted &&\r\n                        moment(x.dueDate).format('DD-MM-YYYY') ===\r\n                          moment(date).format('DD-MM-YYYY')\r\n                    )\r\n                  ) {\r\n                    return 'highlight';\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col md={6} sm={12} className=\"bg-sky\">\r\n              <Row className=\"mt-3\">\r\n                <Col md={6} sm={12}>\r\n                  <div className=\"bg-danger d-flex justify-content-between my-card\">\r\n                    <div className=\"d-flex flex-column\">\r\n                      <span className=\"my-card-number font-weight-bold text-white\">\r\n                        206\r\n                      </span>\r\n                      <span className=\"text-white\">Daily sales</span>\r\n                    </div>\r\n                    <div>\r\n                      <i className=\"fa fa-calendar fa-2x text-white\"></i>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n                <Col md={6} sm={12}>\r\n                  <div className=\"bg-success d-flex justify-content-between my-card\">\r\n                    <div className=\"d-flex flex-column\">\r\n                      <span className=\"my-card-number font-weight-bold text-white\">\r\n                        1200\r\n                      </span>\r\n                      <span className=\"text-white\">Daily Expanse</span>\r\n                    </div>\r\n                    <div>\r\n                      <i className=\"fa fa-bookmark fa-2x text-white\"></i>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"mt-3\">\r\n                <Col md={6} sm={12}>\r\n                  <div className=\"bg-primary d-flex justify-content-between my-card\">\r\n                    <div className=\"d-flex flex-column\">\r\n                      <span className=\"my-card-number font-weight-bold text-white\">\r\n                        2055\r\n                      </span>\r\n                      <span className=\"text-white\">Done</span>\r\n                    </div>\r\n                    <div>\r\n                      <i className=\"fa fa-check fa-2x text-white\"></i>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n                <Col md={6} sm={12}>\r\n                  <div className=\"bg-warning d-flex justify-content-between my-card\">\r\n                    <div className=\"d-flex flex-column\">\r\n                      <span className=\"my-card-number font-weight-bold text-white\">\r\n                        5220\r\n                      </span>\r\n                      <span className=\"text-white\">Shipment</span>\r\n                    </div>\r\n                    <div>\r\n                      <i className=\"fa fa-bus fa-2x text-white\"></i>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"d-flex justify-content-center  bg-light mt-5\">\r\n                expanses\r\n                <MyChart></MyChart>\r\n              </div>\r\n            </Col>\r\n            <Col md={3} sm={12}>\r\n              <ListGroup as=\"ul\">\r\n                <ListGroup.Item\r\n                  style={{\r\n                    justifyContent: 'space-between'\r\n                  }}\r\n                  as=\"li\"\r\n                  active\r\n                  className=\"d-flex\">\r\n                  <Button disabled={true}>Project</Button>\r\n                  <Button color=\"primary\" onClick={toggleProject}>\r\n                    Add Project\r\n                  </Button>{' '}\r\n                </ListGroup.Item>\r\n                {projects.length > 0 &&\r\n                  projects.map((t, i) => (\r\n                    <>\r\n                      <ListGroup.Item\r\n                        as=\"li\"\r\n                        style={{\r\n                          justifyContent: 'space-between'\r\n                        }}\r\n                        className=\"d-flex\">\r\n                        <div>{t.project}</div>\r\n                        {t.isAssigned && (\r\n                          <Badge\r\n                            color={\r\n                              t.isCompleted\r\n                                ? 'success'\r\n                                : t.isAssigned\r\n                                ? 'primary'\r\n                                : 'dark'\r\n                            }>\r\n                            {t.isCompleted\r\n                              ? 'Completed'\r\n                              : t.isAssigned\r\n                              ? 'Working'\r\n                              : 'Not Assigned'}\r\n                          </Badge>\r\n                        )}\r\n                        {!t.isAssigned && (\r\n                          <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              toggleAssign(i);\r\n                            }}>\r\n                            Assign\r\n                          </Button>\r\n                        )}\r\n                      </ListGroup.Item>\r\n                      <AssignModal\r\n                        toggle={toggleAssign}\r\n                        projectId={t.id}\r\n                        teams={teams}\r\n                        projects={projects}\r\n                        Id={i}\r\n                        modal={modalAssign[i]}\r\n                      />\r\n                    </>\r\n                  ))}\r\n              </ListGroup>\r\n              <ListGroup as=\"ul\" className=\"mt-3\">\r\n                <ListGroup.Item\r\n                  style={{\r\n                    justifyContent: 'space-between'\r\n                  }}\r\n                  as=\"li\"\r\n                  active\r\n                  className=\"d-flex\">\r\n                  <Button disabled={true}>Teams</Button>\r\n                  <Button color=\"primary\" onClick={toggle}>\r\n                    Add Team\r\n                  </Button>{' '}\r\n                </ListGroup.Item>\r\n                {teams.length > 0 &&\r\n                  _.uniqBy(teams, (t) => {\r\n                    return t.team._id;\r\n                  }).map((t) => (\r\n                    <ListGroup.Item as=\"li\">{t.team.name}</ListGroup.Item>\r\n                  ))}\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 6, offset: 3 }} sm={12}>\r\n              <h3 className=\"text-center mt-3\">Payroll</h3>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th> Full Name</th>\r\n                    <th>Email</th>\r\n                    <th>Role</th>\r\n\r\n                    <th>Paid</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {staff.length > 0 &&\r\n                    staff.map((e, i) => (\r\n                      <tr>\r\n                        <td>{i + 1}</td>\r\n                        <td>{e.email}</td>\r\n                        <td>{e.displayName}</td>\r\n                        <td>{e.type}</td>\r\n                        <td>{e.isPaid ? 'PAID' : 'NOT PAID'}</td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <AddTeamModal\r\n        toggle={toggle}\r\n        setModal={setModal}\r\n        employeeAndStaff={employeeAndStaff}\r\n        modal={modal}\r\n        employees={employees}\r\n      />\r\n      <AddProjectModal\r\n        toggle={toggleProject}\r\n        setModal={setModalProject}\r\n        modal={modalProject}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  employees: state.app.employees,\r\n  teams: state.app.teams,\r\n  projects: state.app.projects,\r\n  staff: state.app.staff,\r\n  employeeAndStaff: state.app.employeeAndStaff\r\n});\r\nexport default connect(mapStateToProps, {\r\n  getUser,\r\n  getAllTeams,\r\n  getAllProject,\r\n  getEmployeeAndStaff,\r\n  getStaff\r\n})(Manager);\r\n","D:\\learn-gitlab\\client\\src\\pages\\add-material\\AddMaterial.js",["379","380","381"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert\";\r\nconst AddMaterial = () => {\r\n  const [machines, setMachines] = useState([]);\r\n  const [type, setType] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [count, setCount] = useState(\"\");\r\n  const [machine, setMachine] = useState(\"\");\r\n  useEffect(() => {\r\n    axios\r\n      .get(baseUrl + \"/machines/getAllMachines\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then(response => {\r\n        setMachines(response.data.data);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  const save = e => {\r\n    e.preventDefault();\r\n    const data = {\r\n      type,\r\n      count,\r\n      machine,\r\n      name,\r\n    };\r\n    console.log(data);\r\n    axios\r\n      .post(baseUrl + \"/rawMaterials/addNewRawMaterial\", data)\r\n      .then(response => {\r\n        Swal(\"Raw Material Added\");\r\n      })\r\n      .catch(error => {\r\n        Swal(error.response.data.error);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <h1 className='text-center mt-3'>Add Material </h1>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Type'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Product Type</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Type'\r\n            value={type}\r\n            onChange={e => setType(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        \r\n        <Form.Group>\r\n          <Form.Label>Product Quantity</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Quantity'\r\n            value={count}\r\n            onChange={e => setCount(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId='exampleForm.SelectCustom'>\r\n          <Form.Label>Select Machine</Form.Label>\r\n          <Form.Control\r\n            as='select'\r\n            custom\r\n            onChange={e => setMachine(e.target.value)}\r\n          >\r\n            {machines.map(machine => (\r\n              <option key={machine.id} value={machine.id}>\r\n                {machine.name}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Button onClick={save}>Add</Button>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddMaterial;\r\n","D:\\learn-gitlab\\client\\src\\pages\\add-product\\AddProduct.js",["382","383","384","385","386","387","388","389","390","391","392","393","394"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { TimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\n\r\n// pick a date util library\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport LuxonUtils from \"@date-io/luxon\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { baseUrl } from \"./../../baseUrl\";\r\n\r\nimport Swal from \"sweetalert\";\r\nimport \"./AddProduct.css\";\r\n\r\nconst Add = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [duration, handleDateChange] = useState();\r\n  const [operatorNo, setoperatorNo] = useState(null);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [rawMaterials, setrawMaterials] = useState([]);\r\n  const [rawMaterial, setrawMaterial] = useState([]);\r\n\r\n  const [description, setDescription] = useState(\"\");\r\n  const [machines, setMachines] = useState([]);\r\n  const [machine, setMachine] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(baseUrl + \"/machines/getAllMachines\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then(response => {\r\n        setMachines(response.data.data);\r\n        console.log(machines);\r\n      })\r\n      .catch(error => {\r\n        Swal(\"error in fetching machines\");\r\n      });\r\n    axios\r\n      .get(baseUrl + \"/rawMaterials/getAllRawMaterials\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n      .then(response => {\r\n        setrawMaterials(response.data.data);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  const handleAdd = e => {\r\n    e.preventDefault();\r\n    console.log({\r\n      name,\r\n      operatorNo,\r\n      image,\r\n      category,\r\n      price,\r\n      duration,\r\n      description,\r\n      rawMaterial,\r\n      machine,\r\n    });\r\n    if (\r\n      (name == \"\" ||\r\n        operatorNo === null ||\r\n        image == \"\" ||\r\n        category == \"\" ||\r\n        price == \"\" ||\r\n        description == \"\",\r\n      machine == \"\")\r\n    ) {\r\n      Swal(\"please provid all required fields\");\r\n    } else {\r\n      let productData = new FormData();\r\n      productData.append(\"name\", name);\r\n      productData.append(\"operatorNo\", operatorNo);\r\n      productData.append(\"image\", image);\r\n      productData.append(\"duration\", duration);\r\n      productData.append(\"category\", category);\r\n      productData.append(\"price\", price);\r\n      productData.append(\"rawMaterialsId\", rawMaterial);\r\n      productData.append(\"description\", description);\r\n      productData.append(\"machineId\", machine);\r\n      console.log(productData);\r\n      axios\r\n        .post(\r\n          \"http://localhost:5000/api/v1/products/createProduct\",\r\n          productData\r\n        )\r\n        .then(response => {\r\n          Swal(response.data.message);\r\n        })\r\n        .catch(error => {\r\n          Swal(error.response.data.error);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h1 className='mt-3 text-center'>Add Products</h1>\r\n      <Form onSubmit={handleAdd}>\r\n        <Form.Group>\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n            placeholder='Name...'\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Upload Image</Form.Label>\r\n          <Form.Control\r\n            type='file'\r\n            onChange={e => setImage(e.target.files[0])}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Category</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            value={category}\r\n            onChange={e => setCategory(e.target.value)}\r\n            placeholder='category...'\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Operator No.</Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={operatorNo}\r\n            onChange={e => setoperatorNo(e.target.value)}\r\n            placeholder='Name...'\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <MuiPickersUtilsProvider utils={MomentUtils}>\r\n            <TimePicker\r\n              ampm={false}\r\n              openTo='hours'\r\n              views={[\"hours\", \"minutes\", \"seconds\"]}\r\n              format='HH:mm:ss'\r\n              label='Duration'\r\n              value={duration}\r\n              onChange={handleDateChange}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>price</Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={price}\r\n            onChange={e => setPrice(e.target.value)}\r\n            placeholder='Name...'\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId='exampleForm.ControlTextarea1'>\r\n          <Form.Label>Textarea</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n            rows={3}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId='exampleForm.SelectCustom'>\r\n          <Form.Label>Select RawMaterial</Form.Label>\r\n          <Form.Control\r\n            as='select'\r\n            custom\r\n            value={rawMaterial}\r\n            onChange={e => {\r\n              setrawMaterial(e.target.value);\r\n            }}\r\n          >\r\n            <option value=''>Please Select</option>\r\n            {rawMaterials.map(material => (\r\n              <option key={material.id} value={material.id}>\r\n                {material.name}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId='exampleForm.SelectCustom'>\r\n          <Form.Label>Select Machine</Form.Label>\r\n          <Form.Control\r\n            as='select'\r\n            custom\r\n            value={machine}\r\n            onChange={e => {\r\n              setMachine(e.target.value);\r\n            }}\r\n          >\r\n            <option value=''>Please Select</option>\r\n            {machines.map(machine1 => (\r\n              <option key={machine1.id} value={machine1.id}>\r\n                {machine1.name}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Button className='btn-block mt-3 mb-3' variant='primary' type='submit'>\r\n          Add\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","D:\\learn-gitlab\\client\\src\\pages\\add-form\\AddForm.js",["395","396","397","398","399","400"],"import React, { useState } from \"react\";\r\nimport Nav from \"../Header/Header\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport ProductForm from \"../add-product/AddProduct\";\r\nimport MachineFrom from \"../add-machine/AddMachine\";\r\nimport MaterialFrom from \"../add-material/AddMaterial\";\r\nimport AssignFrom from \"../orders/GenerateOrderForm\";\r\nconst AddForm = () => {\r\n  const [form, setForm] = useState(0);\r\n  return (\r\n    <div>\r\n      <Nav></Nav>\r\n      <Container>\r\n        <Row>\r\n          <Col md={{ span: 6, offset: 3 }}>\r\n            <div className='mt-3 d-flex justify-content-between align-items-center'>\r\n              <input\r\n                type='radio'\r\n                name='form'\r\n                checked={form === 0 && true}\r\n                onChange={() => setForm(0)}\r\n              />\r\n              <label>Add Product</label>\r\n              <input\r\n                type='radio'\r\n                name='form'\r\n                checked={form === 1 && true}\r\n                onChange={() => setForm(1)}\r\n              />\r\n              <label>Add Machine</label>\r\n              <input\r\n                type='radio'\r\n                name='form'\r\n                checked={form === 2 && true}\r\n                onChange={() => setForm(2)}\r\n              />\r\n              <label>Add Raw Material</label>\r\n              <input\r\n                type='radio'\r\n                checked={form === 3 && true}\r\n                name='form'\r\n                onChange={() => setForm(3)}\r\n              />\r\n              <label>Assign Order</label>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={{ span: 6, offset: 3 }}>\r\n            {form == 0 ? (\r\n              <ProductForm></ProductForm>\r\n            ) : form == 1 ? (\r\n              <MachineFrom></MachineFrom>\r\n            ) : form == 2 ? (\r\n              <MaterialFrom></MaterialFrom>\r\n            ) : form == 3 ? (\r\n              <AssignFrom></AssignFrom>\r\n            ) : (\r\n              <ProductForm></ProductForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddForm;\r\n","D:\\learn-gitlab\\client\\src\\pages\\add-machine\\AddMachine.js",["401","402","403","404","405","406","407"],"import React, { useState } from 'react'\r\nimport Nav from '../Header/Header'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert';\r\n//swal(\"Hello world!\");\r\nconst Create = () => {\r\n    const [name, setName] = useState('');\r\n    const [model, setModel] = useState('');\r\n    const [build, setBuild] = useState('');\r\n    const [status, setStatus] = useState(1);\r\n    const [target, setTarget] = useState(1);\r\n    const handleCreate = (e) => {\r\n        e.preventDefault();\r\n        if (name == '' || model == '' || build == '') {\r\n            Swal('please provid all required fields');\r\n        }\r\n        else {\r\n            const machineData = {\r\n                name, model, build, status, target\r\n            }\r\n            Axios.post('http://localhost:5000/api/v1/machines/addNewMachine', machineData)\r\n                .then((response) => {\r\n                    Swal(response.data.message);\r\n                }).catch((error) => {\r\n                    Swal(error.response.data.error);\r\n                })\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h1 className='mt-3 text-center'>Add Machines</h1>\r\n            <Form onSubmit={handleCreate}>\r\n                <Form.Group >\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Name...\" />\r\n                </Form.Group>\r\n                <Form.Group >\r\n                    <Form.Label>Model</Form.Label>\r\n                    <Form.Control type=\"text\" value={model} onChange={e => setModel(e.target.value)} placeholder=\"Model...\" />\r\n                </Form.Group>\r\n                <Form.Group >\r\n                    <Form.Label>Build</Form.Label>\r\n                    <Form.Control type=\"text\" value={build} onChange={e => setBuild(e.target.value)} placeholder=\"Build...\" />\r\n                </Form.Group>\r\n                <Form.Group >\r\n                    <Form.Label>Status</Form.Label>\r\n                    <Form.Control type=\"number\" value={status} onChange={e => setStatus(e.target.value)} placeholder=\"Status...\" />\r\n                </Form.Group>\r\n                <Form.Group >\r\n                    <Form.Label>Target</Form.Label>\r\n                    <Form.Control type=\"number\" value={target} onChange={e => setTarget(e.target.value)} placeholder=\"Target...\" />\r\n                </Form.Group>\r\n\r\n                <Button className='btn-block mt-3 mb-3' variant=\"primary\" type=\"submit\">\r\n                    Add\r\n                            </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Create\r\n","D:\\learn-gitlab\\client\\src\\baseUrl.js",[],"D:\\learn-gitlab\\client\\src\\actions\\types.js",[],"D:\\learn-gitlab\\client\\src\\actions\\projectActions.js",["408","409","410"],"import { baseUrl } from \"../baseUrl\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\nimport * as Type from \"./types\";\r\n\r\nexport const createProject = (name, des, date) => async dispatch => {\r\n  try {\r\n    const res = await axios.post(\r\n      `${baseUrl}/projects/createProject`,\r\n      { project: name, description: des, dueDate: date },\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      }\r\n    );\r\n    dispatch(getAllProject());\r\n    return true;\r\n  } catch (error) {\r\n    console.log(error.response);\r\n    return false;\r\n  }\r\n};\r\nexport const assignProject = (id, teamId) => async dispatch => {\r\n  try {\r\n    const res = await axios.post(\r\n      `${baseUrl}/projects/assignProject`,\r\n      { id: id, teamId: teamId },\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      }\r\n    );\r\n    dispatch(getAllProject());\r\n    return true;\r\n  } catch (error) {\r\n    console.log(error.response);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getAllProject = () => async dispatch => {\r\n  try {\r\n    const projects = await axios.get(`${baseUrl}/projects/getAllProjects`, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    dispatch({\r\n      type: Type.GET_ALL_PROJECTS,\r\n      payload: projects.data.data,\r\n    });\r\n  } catch (error) {\r\n    debugger;\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    debugger;\r\n    console.log(error);\r\n  }\r\n};\r\n","D:\\learn-gitlab\\client\\src\\actions\\staffAction.js",["411","412"],"D:\\learn-gitlab\\client\\src\\actions\\teamsActions.js",["413","414","415","416","417"],"import { baseUrl } from \"../baseUrl\";\r\nimport _ from \"lodash\";\r\nimport { get, post, put, deleteApi } from \"../api\";\r\n\r\nimport axios from \"axios\";\r\nimport * as Type from \"./types\";\r\n\r\nexport const createTeam = (name, member) => async dispatch => {\r\n  try {\r\n    let members = [];\r\n    member.forEach(m => {\r\n      members.push({ memberId: m.id, memberName: m.displayName });\r\n    });\r\n\r\n    const res = await axios.post(\r\n      `${baseUrl}/teams/createTeam`,\r\n      { name: name, members: members },\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n      }\r\n    );\r\n    dispatch(getAllTeams());\r\n    return true;\r\n  } catch (error) {\r\n    console.log(error.response);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getAllTeams = () => async dispatch => {\r\n  try {\r\n    const teams = await axios.get(`${baseUrl}/teams/getAllTeams`, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n      },\r\n    });\r\n    dispatch({\r\n      type: Type.GET_ALL_TEAM,\r\n      payload: teams.data.data,\r\n    });\r\n  } catch (error) {\r\n    debugger;\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    debugger;\r\n    console.log(error);\r\n  }\r\n};\r\nexport const getMyTeams = () => async dispatch => {\r\n  try {\r\n    const res = await get(\"/teams/getMyTeams\");\r\n    dispatch({\r\n      type: Type.GET_MY_TEAMS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","D:\\learn-gitlab\\client\\src\\actions\\userActions.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\layouts\\ChartLayout.js",[],"D:\\learn-gitlab\\client\\src\\components\\Dashboard\\layouts\\AgGridLayout.js",[],"D:\\learn-gitlab\\client\\src\\pages\\Staff_view\\Big.js",["418","419"],"import React from 'react'\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\r\nimport { Draggable } from '@fullcalendar/interaction';\r\nconst Big = () => {\r\n    return (\r\n        <div >\r\n            <FullCalendar\r\n                plugins={[dayGridPlugin]}\r\n                initialView=\"dayGridMonth\"\r\n                weekends={false}\r\n                events={[\r\n                    { title: 'event 1', date: '2021-04-28' },\r\n                    { title: 'event 2', date: '2021-04-29' }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Big\r\n","D:\\learn-gitlab\\client\\src\\pages\\Header\\Header.js",[],"D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AssgnModal\\AssignModal.js",["420","421","422"],"import React, { useState } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { connect } from \"react-redux\";\r\nimport _ from \"lodash\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { assignProject } from \"../../../../actions/projectActions\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n  Form,\r\n  FormGroup,\r\n} from \"reactstrap\";\r\n\r\nconst AddTeamModal = props => {\r\n  const {\r\n    buttonLabel,\r\n    className,\r\n    toggle,\r\n    modal,\r\n    teams,\r\n    assignProject,\r\n    Id,\r\n    projects,\r\n    projectId,\r\n  } = props;\r\n  const [Team, setTeam] = useState({\r\n    team: null,\r\n  });\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    const res = await assignProject(projectId, Team.team);\r\n    if (res) {\r\n      toggle(Id);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={() => {\r\n          toggle(Id);\r\n        }}\r\n        className={className}\r\n      >\r\n        <ModalHeader toggle={toggle}>Add Team</ModalHeader>\r\n        <Form onSubmit={onSubmit}>\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label htmlFor='exampleEmail'>Select Team </Label>\r\n              <Autocomplete\r\n                id='exampleEmail'\r\n                options={_.uniqBy(teams, t => {\r\n                  return t.team._id;\r\n                }).filter(t => {\r\n                  if (\r\n                    !projects\r\n                      .filter(p => p.team)\r\n                      .some(p => p.team.toString() === t.team._id.toString())\r\n                  )\r\n                    return t;\r\n                })}\r\n                getOptionLabel={option => (option ? option.team.name : [])}\r\n                onChange={(e, value) => {\r\n                  setTeam({\r\n                    team: value.team._id,\r\n                  });\r\n                }}\r\n                filterSelectedOptions\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    variant='outlined'\r\n                    placeholder='Favorites'\r\n                  />\r\n                )}\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              color='primary'\r\n              onClick={() => {\r\n                toggle(Id);\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button color='secondary' type='submit'>\r\n              Assign Project\r\n            </Button>\r\n          </ModalFooter>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { assignProject })(AddTeamModal);\r\n","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AddteamModel\\AddTeamModel.js",["423","424"],"import React, { useState } from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { connect } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createTeam } from '../../../../actions/teamsActions';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n  Form,\r\n  FormGroup\r\n} from 'reactstrap';\r\n\r\nconst AddTeamModal = (props) => {\r\n  const {\r\n    buttonLabel,\r\n    className,\r\n    toggle,\r\n    modal,\r\n    employees,\r\n    employeeAndStaff,\r\n    createTeam\r\n  } = props;\r\n  const [Team, setTeam] = useState({\r\n    name: '',\r\n    members: []\r\n  });\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const res = await createTeam(Team.name, Team.members);\r\n    if (res) {\r\n      toggle();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Add Team</ModalHeader>\r\n        <Form onSubmit={onSubmit}>\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label htmlFor=\"exampleEmail\">Team Name</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"team\"\r\n                id=\"exampleEmail\"\r\n                onChange={(e) => {\r\n                  setTeam({\r\n                    ...Team,\r\n                    name: e.target.value\r\n                  });\r\n                }}\r\n                placeholder=\"Write Team Name\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"exampleEmail\">Select Team Members</Label>\r\n              <Autocomplete\r\n                multiple\r\n                id=\"exampleEmail\"\r\n                options={employeeAndStaff}\r\n                getOptionLabel={(option) => option.displayName}\r\n                onChange={(e, value) => {\r\n                  setTeam({\r\n                    ...Team,\r\n                    members: value\r\n                  });\r\n                }}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Favorites\"\r\n                  />\r\n                )}\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={toggle}>\r\n              Cancel\r\n            </Button>{' '}\r\n            <Button color=\"secondary\" type=\"submit\">\r\n              Create Team\r\n            </Button>\r\n          </ModalFooter>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { createTeam })(AddTeamModal);\r\n","D:\\learn-gitlab\\client\\src\\pages\\Manager_view\\components\\AddProject\\AddProjectModal.js",["425"],"import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { createProject } from \"../../../../actions/projectActions\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n  Form,\r\n  FormGroup,\r\n} from \"reactstrap\";\r\n\r\nconst AddProjectModal = props => {\r\n  const { buttonLabel, className, toggle, modal, createProject } = props;\r\n  const [Project, setProject] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    dueDate: \"\",\r\n  });\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    const res = await createProject(\r\n      Project.name,\r\n      Project.description,\r\n      moment(Project.dueDate)\r\n    );\r\n    if (res) {\r\n      toggle();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Add Project</ModalHeader>\r\n        <Form onSubmit={onSubmit}>\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label htmlFor='exampleEmail'>Project Name</Label>\r\n              <Input\r\n                type='text'\r\n                name='team'\r\n                id='exampleEmail'\r\n                value={Project.name}\r\n                onChange={e => {\r\n                  setProject({\r\n                    ...Project,\r\n                    name: e.target.value,\r\n                  });\r\n                }}\r\n                placeholder='Write Project Name'\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='exampleText'>Project Description</Label>\r\n              <Input\r\n                type='textarea'\r\n                name='text'\r\n                id='exampleText'\r\n                placeholder='Write Project Description'\r\n                value={Project.description}\r\n                onChange={e => {\r\n                  setProject({\r\n                    ...Project,\r\n                    description: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='exampleDate'>Due Date</Label>\r\n              <Input\r\n                type='date'\r\n                name='date'\r\n                id='exampleDate'\r\n                value={Project.dueDate}\r\n                onChange={e => {\r\n                  debugger;\r\n                  console.log(e.target.value);\r\n                  setProject({\r\n                    ...Project,\r\n                    dueDate: e.target.value,\r\n                  });\r\n                }}\r\n                placeholder='date placeholder'\r\n              />\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={toggle}>\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button color='secondary' type='submit'>\r\n              Create Project\r\n            </Button>\r\n          </ModalFooter>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { createProject })(AddProjectModal);\r\n","D:\\learn-gitlab\\client\\src\\reducers\\index.js",[],"D:\\learn-gitlab\\client\\src\\pages\\Header\\SliderData.js",[],"D:\\learn-gitlab\\client\\src\\utils\\functions.js",[],"D:\\learn-gitlab\\client\\src\\reducers\\appReducer.js",[],"D:\\learn-gitlab\\client\\src\\api\\index.js",[],"D:\\learn-gitlab\\client\\src\\api\\delete.js",[],"D:\\learn-gitlab\\client\\src\\api\\baseUrl.js",[],"D:\\learn-gitlab\\client\\src\\api\\post.js",[],"D:\\learn-gitlab\\client\\src\\api\\get.js",[],"D:\\learn-gitlab\\client\\src\\api\\put.js",[],"D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Buttom-Container.js",[],"D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Top-Container.js",[],"D:\\learn-gitlab\\client\\src\\pages\\health-safety\\Form.js",["426","427","428","429"],"import React, { useRef, useState } from \"react\";\r\nimport moment from \"moment\";\r\n//check\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport DateTimePicker from \"react-datetime\";\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport \"./Hse.css\";\r\n\r\nimport { Form, Button } from \"react-bootstrap\";\r\nconst HealthSafetyForm = () => {\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const yesterday = DateTimePicker.moment().subtract(1, \"day\");\r\n  const valid = function (current) {\r\n    return current.isAfter(yesterday);\r\n  };\r\n  const sigCanvas = useRef({});\r\n  const clear = (e) => {\r\n    e.preventDefault();\r\n    sigCanvas.current.clear();\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\"))\r\n    console.log(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\"));\r\n  };\r\n  const changeColor = (e) => {\r\n    e.preventDefault();\r\n    // console.log(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\"))\r\n    // console.log(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\"));\r\n    // var colors = [\"red\",\"blue\",\"black\"];\r\n    // var randomColor = colors[Math.floor(Math.random()*colors.length)]; \r\n    // console.log(randomColor);\r\n    // return randomColor;\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Group controlId='formBasicEmail'>\r\n          <Form.Label>Injury</Form.Label>\r\n          <Form.Control type='text' placeholder='Injury ' />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>First Aid</Form.Label>\r\n          <Form.Control type='text' placeholder='First aid' />\r\n        </Form.Group>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Location near</Form.Label>\r\n          <Form.Control type='text' placeholder='Location..' />\r\n        </Form.Group>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Observation</Form.Label>\r\n          <Form.Control type='text' placeholder='Observation' />\r\n        </Form.Group>\r\n        <strong>Person reporting info</strong>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Id</Form.Label>\r\n          <Form.Control type='text' placeholder='id' />\r\n        </Form.Group>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Equipment</Form.Label>\r\n          <Form.Control type='text' placeholder='Equipment' />\r\n        </Form.Group>\r\n        <strong>Event datails</strong>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Place</Form.Label>\r\n          <Form.Control type='text' placeholder='Place' />\r\n        </Form.Group>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Time</Form.Label>\r\n          <DateTimePicker initialValue={new Date()} isValidDate={valid} />\r\n        </Form.Group>\r\n        <Form.Group controlId='formBasicPassword'>\r\n          <Form.Label>Description</Form.Label>\r\n          <textarea\r\n            cols='30'\r\n            rows='5'\r\n            placeholder='Description'\r\n            className='form-control'\r\n          ></textarea>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.File id='exampleFormControlFile1' label='Site image' />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <SignatureCanvas\r\n            // onBegin={ changeColor}\r\n            penColor='black'//{changeColor.toString() }\r\n            ref={sigCanvas}\r\n            canvasProps={{ width: 500, height: 200, className: \"sigCanvas\" }}\r\n          />\r\n        </Form.Group>\r\n        <div>\r\n          {/* <button className=\"changeColor\"  onClick={changeColor} data-action=\"change-color\">Change Color</button> */}\r\n\r\n          <button className=\"clearButton\" onClick={clear}>clear</button>\r\n          <button className=\"saveButton\" onClick={save}>save</button>\r\n\r\n        </div>\r\n        <Button variant='primary' type='submit'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default HealthSafetyForm;\r\n",{"ruleId":"430","replacedBy":"431"},{"ruleId":"432","replacedBy":"433"},{"ruleId":"434","severity":1,"message":"435","line":4,"column":10,"nodeType":"436","messageId":"437","endLine":4,"endColumn":16},{"ruleId":"434","severity":1,"message":"438","line":5,"column":8,"nodeType":"436","messageId":"437","endLine":5,"endColumn":20},{"ruleId":"434","severity":1,"message":"439","line":14,"column":42,"nodeType":"436","messageId":"437","endLine":14,"endColumn":50},{"ruleId":"434","severity":1,"message":"440","line":22,"column":7,"nodeType":"436","messageId":"437","endLine":22,"endColumn":11},{"ruleId":"434","severity":1,"message":"441","line":29,"column":7,"nodeType":"436","messageId":"437","endLine":29,"endColumn":12},{"ruleId":"434","severity":1,"message":"442","line":30,"column":7,"nodeType":"436","messageId":"437","endLine":30,"endColumn":12},{"ruleId":"434","severity":1,"message":"443","line":31,"column":7,"nodeType":"436","messageId":"437","endLine":31,"endColumn":12},{"ruleId":"434","severity":1,"message":"444","line":32,"column":7,"nodeType":"436","messageId":"437","endLine":32,"endColumn":12},{"ruleId":"434","severity":1,"message":"445","line":33,"column":7,"nodeType":"436","messageId":"437","endLine":33,"endColumn":12},{"ruleId":"434","severity":1,"message":"446","line":34,"column":7,"nodeType":"436","messageId":"437","endLine":34,"endColumn":15},{"ruleId":"434","severity":1,"message":"447","line":35,"column":7,"nodeType":"436","messageId":"437","endLine":35,"endColumn":15},{"ruleId":"434","severity":1,"message":"448","line":36,"column":7,"nodeType":"436","messageId":"437","endLine":36,"endColumn":15},{"ruleId":"434","severity":1,"message":"449","line":40,"column":7,"nodeType":"436","messageId":"437","endLine":40,"endColumn":14},{"ruleId":"434","severity":1,"message":"450","line":43,"column":7,"nodeType":"436","messageId":"437","endLine":43,"endColumn":14},{"ruleId":"434","severity":1,"message":"451","line":44,"column":7,"nodeType":"436","messageId":"437","endLine":44,"endColumn":12},{"ruleId":"434","severity":1,"message":"452","line":45,"column":7,"nodeType":"436","messageId":"437","endLine":45,"endColumn":11},{"ruleId":"434","severity":1,"message":"453","line":46,"column":7,"nodeType":"436","messageId":"437","endLine":46,"endColumn":12},{"ruleId":"434","severity":1,"message":"454","line":48,"column":7,"nodeType":"436","messageId":"437","endLine":48,"endColumn":17},{"ruleId":"434","severity":1,"message":"455","line":49,"column":7,"nodeType":"436","messageId":"437","endLine":49,"endColumn":24},{"ruleId":"434","severity":1,"message":"456","line":52,"column":7,"nodeType":"436","messageId":"437","endLine":52,"endColumn":13},{"ruleId":"434","severity":1,"message":"457","line":53,"column":7,"nodeType":"436","messageId":"437","endLine":53,"endColumn":11},{"ruleId":"434","severity":1,"message":"458","line":54,"column":7,"nodeType":"436","messageId":"437","endLine":54,"endColumn":14},{"ruleId":"434","severity":1,"message":"459","line":57,"column":7,"nodeType":"436","messageId":"437","endLine":57,"endColumn":10},{"ruleId":"434","severity":1,"message":"460","line":58,"column":7,"nodeType":"436","messageId":"437","endLine":58,"endColumn":18},{"ruleId":"434","severity":1,"message":"461","line":61,"column":7,"nodeType":"436","messageId":"437","endLine":61,"endColumn":17},{"ruleId":"434","severity":1,"message":"462","line":62,"column":7,"nodeType":"436","messageId":"437","endLine":62,"endColumn":17},{"ruleId":"434","severity":1,"message":"463","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":9},{"ruleId":"464","severity":1,"message":"465","line":139,"column":27,"nodeType":"466","messageId":"467","endLine":139,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":169,"column":29,"nodeType":"466","messageId":"467","endLine":169,"endColumn":31},{"ruleId":"464","severity":1,"message":"465","line":189,"column":29,"nodeType":"466","messageId":"467","endLine":189,"endColumn":31},{"ruleId":"464","severity":1,"message":"465","line":195,"column":36,"nodeType":"466","messageId":"467","endLine":195,"endColumn":38},{"ruleId":"464","severity":1,"message":"465","line":201,"column":36,"nodeType":"466","messageId":"467","endLine":201,"endColumn":38},{"ruleId":"464","severity":1,"message":"465","line":41,"column":21,"nodeType":"466","messageId":"467","endLine":41,"endColumn":23},{"ruleId":"464","severity":1,"message":"465","line":46,"column":22,"nodeType":"466","messageId":"467","endLine":46,"endColumn":24},{"ruleId":"464","severity":1,"message":"465","line":56,"column":25,"nodeType":"466","messageId":"467","endLine":56,"endColumn":27},{"ruleId":"464","severity":1,"message":"465","line":76,"column":20,"nodeType":"466","messageId":"467","endLine":76,"endColumn":22},{"ruleId":"464","severity":1,"message":"465","line":86,"column":30,"nodeType":"466","messageId":"467","endLine":86,"endColumn":32},{"ruleId":"434","severity":1,"message":"468","line":10,"column":10,"nodeType":"436","messageId":"437","endLine":10,"endColumn":14},{"ruleId":"434","severity":1,"message":"469","line":11,"column":8,"nodeType":"436","messageId":"437","endLine":11,"endColumn":9},{"ruleId":"434","severity":1,"message":"470","line":14,"column":19,"nodeType":"436","messageId":"437","endLine":14,"endColumn":30},{"ruleId":"434","severity":1,"message":"471","line":20,"column":10,"nodeType":"436","messageId":"437","endLine":20,"endColumn":18},{"ruleId":"434","severity":1,"message":"472","line":27,"column":10,"nodeType":"436","messageId":"437","endLine":27,"endColumn":20},{"ruleId":"464","severity":1,"message":"465","line":32,"column":27,"nodeType":"466","messageId":"467","endLine":32,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":32,"column":58,"nodeType":"466","messageId":"467","endLine":32,"endColumn":60},{"ruleId":"464","severity":1,"message":"465","line":37,"column":32,"nodeType":"466","messageId":"467","endLine":37,"endColumn":34},{"ruleId":"473","severity":1,"message":"474","line":118,"column":6,"nodeType":"475","endLine":118,"endColumn":8,"suggestions":"476"},{"ruleId":"477","severity":1,"message":"478","line":190,"column":35,"nodeType":"479","endLine":193,"endColumn":37},{"ruleId":"477","severity":1,"message":"478","line":231,"column":35,"nodeType":"479","endLine":234,"endColumn":37},{"ruleId":"477","severity":1,"message":"478","line":265,"column":23,"nodeType":"479","endLine":268,"endColumn":25},{"ruleId":"477","severity":1,"message":"478","line":300,"column":29,"nodeType":"479","endLine":303,"endColumn":31},{"ruleId":"477","severity":1,"message":"478","line":312,"column":29,"nodeType":"479","endLine":315,"endColumn":31},{"ruleId":"477","severity":1,"message":"478","line":329,"column":25,"nodeType":"479","endLine":332,"endColumn":27},{"ruleId":"464","severity":1,"message":"465","line":199,"column":29,"nodeType":"466","messageId":"467","endLine":199,"endColumn":31},{"ruleId":"464","severity":1,"message":"465","line":211,"column":29,"nodeType":"466","messageId":"467","endLine":211,"endColumn":31},{"ruleId":"464","severity":1,"message":"465","line":262,"column":31,"nodeType":"466","messageId":"467","endLine":262,"endColumn":33},{"ruleId":"434","severity":1,"message":"480","line":4,"column":31,"nodeType":"436","messageId":"437","endLine":4,"endColumn":40},{"ruleId":"481","severity":1,"message":"482","line":68,"column":33,"nodeType":"479","endLine":68,"endColumn":45},{"ruleId":"434","severity":1,"message":"483","line":13,"column":10,"nodeType":"436","messageId":"437","endLine":13,"endColumn":21},{"ruleId":"434","severity":1,"message":"484","line":20,"column":3,"nodeType":"436","messageId":"437","endLine":20,"endColumn":14},{"ruleId":"464","severity":1,"message":"465","line":192,"column":25,"nodeType":"466","messageId":"467","endLine":192,"endColumn":27},{"ruleId":"464","severity":1,"message":"465","line":294,"column":14,"nodeType":"466","messageId":"467","endLine":294,"endColumn":16},{"ruleId":"434","severity":1,"message":"485","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":14},{"ruleId":"434","severity":1,"message":"486","line":6,"column":42,"nodeType":"436","messageId":"437","endLine":6,"endColumn":47},{"ruleId":"434","severity":1,"message":"487","line":6,"column":49,"nodeType":"436","messageId":"437","endLine":6,"endColumn":59},{"ruleId":"434","severity":1,"message":"488","line":6,"column":61,"nodeType":"436","messageId":"437","endLine":6,"endColumn":70},{"ruleId":"434","severity":1,"message":"484","line":6,"column":72,"nodeType":"436","messageId":"437","endLine":6,"endColumn":83},{"ruleId":"434","severity":1,"message":"489","line":7,"column":10,"nodeType":"436","messageId":"437","endLine":7,"endColumn":18},{"ruleId":"473","severity":1,"message":"490","line":24,"column":8,"nodeType":"475","endLine":24,"endColumn":10,"suggestions":"491"},{"ruleId":"434","severity":1,"message":"492","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":11},{"ruleId":"434","severity":1,"message":"493","line":5,"column":10,"nodeType":"436","messageId":"437","endLine":5,"endColumn":19},{"ruleId":"434","severity":1,"message":"494","line":5,"column":21,"nodeType":"436","messageId":"437","endLine":5,"endColumn":24},{"ruleId":"434","severity":1,"message":"495","line":5,"column":26,"nodeType":"436","messageId":"437","endLine":5,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":109,"column":35,"nodeType":"466","messageId":"467","endLine":109,"endColumn":37},{"ruleId":"434","severity":1,"message":"480","line":11,"column":3,"nodeType":"436","messageId":"437","endLine":11,"endColumn":12},{"ruleId":"434","severity":1,"message":"496","line":18,"column":8,"nodeType":"436","messageId":"437","endLine":18,"endColumn":15},{"ruleId":"464","severity":1,"message":"465","line":54,"column":23,"nodeType":"466","messageId":"467","endLine":54,"endColumn":25},{"ruleId":"473","severity":1,"message":"497","line":33,"column":6,"nodeType":"475","endLine":33,"endColumn":8,"suggestions":"498"},{"ruleId":"464","severity":1,"message":"465","line":204,"column":49,"nodeType":"466","messageId":"467","endLine":204,"endColumn":51},{"ruleId":"464","severity":1,"message":"465","line":252,"column":49,"nodeType":"466","messageId":"467","endLine":252,"endColumn":51},{"ruleId":"434","severity":1,"message":"486","line":11,"column":3,"nodeType":"436","messageId":"437","endLine":11,"endColumn":8},{"ruleId":"434","severity":1,"message":"487","line":12,"column":3,"nodeType":"436","messageId":"437","endLine":12,"endColumn":13},{"ruleId":"434","severity":1,"message":"488","line":13,"column":3,"nodeType":"436","messageId":"437","endLine":13,"endColumn":12},{"ruleId":"434","severity":1,"message":"484","line":14,"column":3,"nodeType":"436","messageId":"437","endLine":14,"endColumn":14},{"ruleId":"434","severity":1,"message":"499","line":2,"column":10,"nodeType":"436","messageId":"437","endLine":2,"endColumn":19},{"ruleId":"434","severity":1,"message":"500","line":2,"column":21,"nodeType":"436","messageId":"437","endLine":2,"endColumn":27},{"ruleId":"434","severity":1,"message":"501","line":3,"column":8,"nodeType":"436","messageId":"437","endLine":3,"endColumn":16},{"ruleId":"434","severity":1,"message":"486","line":5,"column":42,"nodeType":"436","messageId":"437","endLine":5,"endColumn":47},{"ruleId":"434","severity":1,"message":"487","line":5,"column":49,"nodeType":"436","messageId":"437","endLine":5,"endColumn":59},{"ruleId":"434","severity":1,"message":"488","line":5,"column":61,"nodeType":"436","messageId":"437","endLine":5,"endColumn":70},{"ruleId":"434","severity":1,"message":"484","line":5,"column":72,"nodeType":"436","messageId":"437","endLine":5,"endColumn":83},{"ruleId":"434","severity":1,"message":"502","line":10,"column":17,"nodeType":"436","messageId":"437","endLine":10,"endColumn":25},{"ruleId":"473","severity":1,"message":"503","line":44,"column":6,"nodeType":"475","endLine":44,"endColumn":8,"suggestions":"504"},{"ruleId":"434","severity":1,"message":"493","line":4,"column":10,"nodeType":"436","messageId":"437","endLine":4,"endColumn":19},{"ruleId":"434","severity":1,"message":"494","line":4,"column":21,"nodeType":"436","messageId":"437","endLine":4,"endColumn":24},{"ruleId":"434","severity":1,"message":"495","line":4,"column":26,"nodeType":"436","messageId":"437","endLine":4,"endColumn":29},{"ruleId":"434","severity":1,"message":"505","line":1,"column":38,"nodeType":"436","messageId":"437","endLine":1,"endColumn":46},{"ruleId":"434","severity":1,"message":"506","line":6,"column":8,"nodeType":"436","messageId":"437","endLine":6,"endColumn":20},{"ruleId":"434","severity":1,"message":"507","line":7,"column":8,"nodeType":"436","messageId":"437","endLine":7,"endColumn":18},{"ruleId":"434","severity":1,"message":"493","line":8,"column":10,"nodeType":"436","messageId":"437","endLine":8,"endColumn":19},{"ruleId":"434","severity":1,"message":"494","line":8,"column":21,"nodeType":"436","messageId":"437","endLine":8,"endColumn":24},{"ruleId":"434","severity":1,"message":"495","line":8,"column":26,"nodeType":"436","messageId":"437","endLine":8,"endColumn":29},{"ruleId":"473","severity":1,"message":"508","line":54,"column":6,"nodeType":"475","endLine":54,"endColumn":8,"suggestions":"509"},{"ruleId":"464","severity":1,"message":"465","line":69,"column":13,"nodeType":"466","messageId":"467","endLine":69,"endColumn":15},{"ruleId":"464","severity":1,"message":"465","line":71,"column":15,"nodeType":"466","messageId":"467","endLine":71,"endColumn":17},{"ruleId":"464","severity":1,"message":"465","line":72,"column":18,"nodeType":"466","messageId":"467","endLine":72,"endColumn":20},{"ruleId":"464","severity":1,"message":"465","line":73,"column":15,"nodeType":"466","messageId":"467","endLine":73,"endColumn":17},{"ruleId":"464","severity":1,"message":"465","line":74,"column":21,"nodeType":"466","messageId":"467","endLine":74,"endColumn":23},{"ruleId":"464","severity":1,"message":"465","line":75,"column":15,"nodeType":"466","messageId":"467","endLine":75,"endColumn":17},{"ruleId":"434","severity":1,"message":"510","line":3,"column":31,"nodeType":"436","messageId":"437","endLine":3,"endColumn":35},{"ruleId":"434","severity":1,"message":"511","line":3,"column":37,"nodeType":"436","messageId":"437","endLine":3,"endColumn":43},{"ruleId":"464","severity":1,"message":"465","line":50,"column":19,"nodeType":"466","messageId":"467","endLine":50,"endColumn":21},{"ruleId":"464","severity":1,"message":"465","line":52,"column":22,"nodeType":"466","messageId":"467","endLine":52,"endColumn":24},{"ruleId":"464","severity":1,"message":"465","line":54,"column":22,"nodeType":"466","messageId":"467","endLine":54,"endColumn":24},{"ruleId":"464","severity":1,"message":"465","line":56,"column":22,"nodeType":"466","messageId":"467","endLine":56,"endColumn":24},{"ruleId":"434","severity":1,"message":"492","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":11},{"ruleId":"434","severity":1,"message":"493","line":3,"column":10,"nodeType":"436","messageId":"437","endLine":3,"endColumn":19},{"ruleId":"434","severity":1,"message":"494","line":3,"column":21,"nodeType":"436","messageId":"437","endLine":3,"endColumn":24},{"ruleId":"434","severity":1,"message":"495","line":3,"column":26,"nodeType":"436","messageId":"437","endLine":3,"endColumn":29},{"ruleId":"464","severity":1,"message":"465","line":15,"column":18,"nodeType":"466","messageId":"467","endLine":15,"endColumn":20},{"ruleId":"464","severity":1,"message":"465","line":15,"column":33,"nodeType":"466","messageId":"467","endLine":15,"endColumn":35},{"ruleId":"464","severity":1,"message":"465","line":15,"column":48,"nodeType":"466","messageId":"467","endLine":15,"endColumn":50},{"ruleId":"434","severity":1,"message":"463","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":9},{"ruleId":"434","severity":1,"message":"512","line":8,"column":11,"nodeType":"436","messageId":"437","endLine":8,"endColumn":14},{"ruleId":"434","severity":1,"message":"512","line":26,"column":11,"nodeType":"436","messageId":"437","endLine":26,"endColumn":14},{"ruleId":"434","severity":1,"message":"513","line":3,"column":21,"nodeType":"436","messageId":"437","endLine":3,"endColumn":24},{"ruleId":"434","severity":1,"message":"514","line":3,"column":26,"nodeType":"436","messageId":"437","endLine":3,"endColumn":35},{"ruleId":"434","severity":1,"message":"463","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":9},{"ruleId":"434","severity":1,"message":"515","line":3,"column":15,"nodeType":"436","messageId":"437","endLine":3,"endColumn":19},{"ruleId":"434","severity":1,"message":"513","line":3,"column":21,"nodeType":"436","messageId":"437","endLine":3,"endColumn":24},{"ruleId":"434","severity":1,"message":"514","line":3,"column":26,"nodeType":"436","messageId":"437","endLine":3,"endColumn":35},{"ruleId":"434","severity":1,"message":"512","line":15,"column":11,"nodeType":"436","messageId":"437","endLine":15,"endColumn":14},{"ruleId":"434","severity":1,"message":"516","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":25},{"ruleId":"434","severity":1,"message":"517","line":5,"column":10,"nodeType":"436","messageId":"437","endLine":5,"endColumn":19},{"ruleId":"434","severity":1,"message":"518","line":14,"column":3,"nodeType":"436","messageId":"437","endLine":14,"endColumn":8},{"ruleId":"434","severity":1,"message":"519","line":22,"column":5,"nodeType":"436","messageId":"437","endLine":22,"endColumn":16},{"ruleId":"520","severity":1,"message":"521","line":60,"column":29,"nodeType":"522","messageId":"523","endLine":60,"endColumn":31},{"ruleId":"434","severity":1,"message":"519","line":20,"column":5,"nodeType":"436","messageId":"437","endLine":20,"endColumn":16},{"ruleId":"434","severity":1,"message":"524","line":24,"column":5,"nodeType":"436","messageId":"437","endLine":24,"endColumn":14},{"ruleId":"434","severity":1,"message":"519","line":18,"column":11,"nodeType":"436","messageId":"437","endLine":18,"endColumn":22},{"ruleId":"434","severity":1,"message":"485","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":14},{"ruleId":"434","severity":1,"message":"525","line":11,"column":10,"nodeType":"436","messageId":"437","endLine":11,"endColumn":18},{"ruleId":"434","severity":1,"message":"526","line":11,"column":20,"nodeType":"436","messageId":"437","endLine":11,"endColumn":31},{"ruleId":"434","severity":1,"message":"527","line":26,"column":9,"nodeType":"436","messageId":"437","endLine":26,"endColumn":20},"no-native-reassign",["528"],"no-negated-in-lhs",["529"],"no-unused-vars","'socket' is defined but never used.","Identifier","unusedVar","'PrivateRoute' is defined but never used.","'Redirect' is defined but never used.","'Home' is assigned a value but never used.","'Page2' is assigned a value but never used.","'Page3' is assigned a value but never used.","'Page4' is assigned a value but never used.","'Page5' is assigned a value but never used.","'Page6' is assigned a value but never used.","'ChartEx1' is assigned a value but never used.","'ChartEx2' is assigned a value but never used.","'ChartEx3' is assigned a value but never used.","'Loading' is assigned a value but never used.","'Reports' is assigned a value but never used.","'Stock' is assigned a value but never used.","'Chat' is assigned a value but never used.","'Login' is assigned a value but never used.","'CreateTeam' is assigned a value but never used.","'GenerateOrderForm' is assigned a value but never used.","'Target' is assigned a value but never used.","'Help' is assigned a value but never used.","'Confirm' is assigned a value but never used.","'Map' is assigned a value but never used.","'AddMaterial' is assigned a value but never used.","'AddProduct' is assigned a value but never used.","'AddMachine' is assigned a value but never used.","'_' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'$' is defined but never used.","'baseFileUrl' is defined but never used.","'userChat' is assigned a value but never used.","'isReciever' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.displayName' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["530"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ListGroup' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'AgGridReact' is defined but never used.","'ProgressBar' is defined but never used.","'moment' is defined but never used.","'Table' is defined but never used.","'InputGroup' is defined but never used.","'FormCheck' is defined but never used.","'response' is defined but never used.","React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array.",["531"],"'Nav' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'MyChart' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["532"],"'GoogleMap' is defined but never used.","'Marker' is defined but never used.","'Calendar' is defined but never used.","'CardText' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllProject', 'getAllTeams', 'getEmployeeAndStaff', 'getStaff', and 'getUser'. Either include them or remove the dependency array. If 'getUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["533"],"'Fragment' is defined but never used.","'DateFnsUtils' is defined but never used.","'LuxonUtils' is defined but never used.","React Hook useEffect has a missing dependency: 'machines'. Either include it or remove the dependency array.",["534"],"'Form' is defined but never used.","'Button' is defined but never used.","'res' is assigned a value but never used.","'put' is defined but never used.","'deleteApi' is defined but never used.","'post' is defined but never used.","'interactionPlugin' is defined but never used.","'Draggable' is defined but never used.","'Input' is defined but never used.","'buttonLabel' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'employees' is assigned a value but never used.","'imageURL' is assigned a value but never used.","'setImageURL' is assigned a value but never used.","'changeColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},"Update the dependencies array to be: [props.match.params.displayName, props.match.params.id]",{"range":"545","text":"546"},"Update the dependencies array to be: [employees]",{"range":"547","text":"548"},"Update the dependencies array to be: [dispatch]",{"range":"549","text":"550"},"Update the dependencies array to be: [getAllProject, getAllTeams, getEmployeeAndStaff, getStaff, getUser]",{"range":"551","text":"552"},"Update the dependencies array to be: [machines]",{"range":"553","text":"554"},[3636,3638],"[props.match.params.displayName, props.match.params.id]",[856,858],"[employees]",[1148,1150],"[dispatch]",[1447,1449],"[getAllProject, getAllTeams, getEmployeeAndStaff, getStaff, getUser]",[1800,1802],"[machines]"]